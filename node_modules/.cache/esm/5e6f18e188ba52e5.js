let Models,connectDb,disconnectDb,generateMongooseId,cleanDb,resolver,expect,gql,appModule,createTestClient,ApolloServer;_88b‍.w("./db-test",[["Models",["Models"],function(v){Models=v}],["connectDb",["connectDb"],function(v){connectDb=v}],["disconnectDb",["disconnectDb"],function(v){disconnectDb=v}],["generateMongooseId",["generateMongooseId"],function(v){generateMongooseId=v}],["cleanDb",["cleanDb"],function(v){cleanDb=v}]]);_88b‍.w("../modules/user/resolvers",[["default",["resolver"],function(v){resolver=v}]]);_88b‍.w("chai",[["expect",["expect"],function(v){expect=v}]]);_88b‍.w("apollo-server",[["gql",["gql"],function(v){gql=v}],["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_88b‍.w("mocha");_88b‍.w("../modules/app",[["default",["appModule"],function(v){appModule=v}]]);_88b‍.w("apollo-server-testing",[["createTestClient",["createTestClient"],function(v){createTestClient=v}]]);










before(function (){
    _88b‍.a("connectDb",connectDb)()
})
after(function(){_88b‍.a("disconnectDb",disconnectDb)()})

var loginToken = ""
var token =  loginToken 
var doneUnitTests = false

describe('Running unit tests of the user', function() {
       this.timeout(20000)
        it('should add user', async ()=>{
            const result = await _88b‍.a("resolver",resolver).Mutation.addUser({}, {username: 'testUser',  password:'M123456?m'}, {User: _88b‍.a("Models",Models).user})
            const user = await _88b‍.a("Models",Models).user.findOne({username: 'testUser', isDeleted:'false'})
            _88b‍.a("expect",expect)(result.username + '').to.equal(user.username + '')
            
        })  

        it('should fail when adding an existed username', async()=> {
            const result = await _88b‍.a("resolver",resolver).Mutation.addUser({}, {username: 'testUser',  password:'M123456?m'}, {User: _88b‍.a("Models",Models).user})
            _88b‍.a("expect",expect)(result + '').to.equal('UserInputError: username already exists')
        })

        it('should fail when adding a wrong password format', async()=> {
            const result = await _88b‍.a("resolver",resolver).Mutation.addUser({}, {username: 'testUser',  password:'M123456'}, {User: _88b‍.a("Models",Models).user})
            _88b‍.a("expect",expect)(result + '').to.equal('UserInputError: password must contain an uppercase letter, a lowercase letter and a number.')
        })


        var loginToken = ""
        it('should login user', async ()=>{
            const result = await _88b‍.a("resolver",resolver).Mutation.login({}, {username: 'testUser',  password:'M123456?m'}, {User: _88b‍.a("Models",Models).user})
            loginToken = result.token
            const user = await _88b‍.a("Models",Models).user.findOne({username: 'testUser', isDeleted:'false'})
            _88b‍.a("expect",expect)(result.username + '').to.equal(user.username + '')


        })  

        it('should fail when login with wrong wrong password', async ()=> {
            const result = await _88b‍.a("resolver",resolver).Mutation.login({}, {username: 'testUser',  password:'M12345?r'}, {User: _88b‍.a("Models",Models).user})
            _88b‍.a("expect",expect)(result + '').to.equal('AuthenticationError: invalid credentials')
        })

        it('should edit user', async ()=>{
            const result = await _88b‍.a("resolver",resolver).Mutation.editUser(
                {}, {
                    username: 'testUser',  
                    password:'M123456?m',
                    newPassword:'M123456?r'
                }, 

                    {User: _88b‍.a("Models",Models).user,
                    token : loginToken    
                    } )
            _88b‍.a("expect",expect)(result + '').to.equal('PASSWORD changed succesfuly')        

        })
        
        it('should fail when editting with wrong username', async ()=> {
            const result = await _88b‍.a("resolver",resolver).Mutation.editUser(
                {}, {
                    username: 'test',  
                    password:'M123456?m',
                    newPassword:'M123456?r'
                }, 

                    {User: _88b‍.a("Models",Models).user,
                    token : loginToken    
                    } )

            _88b‍.a("expect",expect)(result + '').to.equal('UserInputError: USER not found')
        })
        
        it('should fail when editting with wrong password credential', async ()=> {
            const result = await _88b‍.a("resolver",resolver).Mutation.editUser(
                {}, {
                    username: 'testUser',  
                    password:'M123456?m',
                    newPassword:'M123456?r'
                }, 

                    {User: _88b‍.a("Models",Models).user,
                    token : loginToken    
                    } )

            _88b‍.a("expect",expect)(result + '').to.equal('AuthenticationError: invalid credentials')
        })

        it('should fail when editting with wrong password format', async ()=> {
            const result = await _88b‍.a("resolver",resolver).Mutation.editUser(
                {}, {
                    username: 'testUser',  
                    password:'M123456?r',
                    newPassword:'M123456'
                }, 

                    {User: _88b‍.a("Models",Models).user,
                    token : loginToken    
                    } )

            _88b‍.a("expect",expect)(result + '').to.equal('UserInputError: password must contain an uppercase letter, a lowercase letter and a number.')
        })


        it('should delete user', async() =>{
            const result = await _88b‍.a("resolver",resolver).Mutation.deleteUser(
                {}, {
                    username: 'testUser',  
                }, 

                    {User: _88b‍.a("Models",Models).user,
                    token : loginToken    
                    }
            )
            const user = await _88b‍.a("Models",Models).user.findOne({_id: result})
            _88b‍.a("expect",expect)(user.isDeleted + '').to.equal('true')

        })

        it('should fail when delete with wrong username', async() =>{
            const result = await _88b‍.a("resolver",resolver).Mutation.deleteUser(
                {}, {
                    username: 'test',  
                }, 

                    {User: _88b‍.a("Models",Models).user,
                    token : loginToken    
                    }
            )
            _88b‍.a("expect",expect)(result + '').to.equal('UserInputError: USER not found')
        })
            
        doneUnitTests = true
   
    })


if (doneUnitTests){
  const server = new (_88b‍.a("ApolloServer",ApolloServer))({
    schema:  _88b‍.a("appModule",appModule).schema,
    context: () => ({ token: token })
    }) 
    const { query, mutate } = _88b‍.a("createTestClient",createTestClient)(server)  
}
  

describe('Running integration tests of the user', function() {
    //this.timeout()

    it('should login user', async() =>{
     const user = await _88b‍.a("Models",Models).user.create({username:'testUser1', password:'$2a$10$ypQA9dZhVtBHp99s.tMb5u2Kx6L8ZbvKUQjC.tmlzEQgyiA9hRwH.'})
     
     await user.save()

     const mutation = gql `
      mutation logIn{
        login(username: "testUser1", password:"M123456?m"){
          token
          username
        }
      }
     `
     const res = await mutate(
           {mutation : mutation}
         )
     _88b‍.a("expect",expect)(res.data.login.username).to.equal('testUser1')

     
    
    })
})
    