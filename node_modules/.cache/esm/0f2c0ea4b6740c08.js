let verify,propOr,genSalt,hash;_b67‍.x([["authenticate",()=>authenticate],["testPassword",()=>testPassword],["hashPassword",()=>hashPassword]]);_b67‍.w("jsonwebtoken",[["verify",["verify"],function(v){verify=v}]]);_b67‍.w("ramda",[["propOr",["propOr"],function(v){propOr=v}]]);_b67‍.w("bcryptjs",[["genSalt",["genSalt"],function(v){genSalt=v}],["hash",["hash"],function(v){hash=v}]]);




// just checks if the token is valid
       const authenticate = async (token) => {
  if (!token) return null
  try {
    const payload = (await verify(token, propOr('secret for test', 'JWT_SECRET')(process.env)))
    return payload
  } catch (e) {
    return null
  }
}

       const testPassword = async (password, username) => {
  if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^ ]{8,}$/.test(password) || password.includes(username)) {
    return false
  }
  return true
}

       const hashPassword = async (password, username) => {
  try {
    if (!await testPassword(password, username)) return false
    const salt = await genSalt()
    const hashedPassword = await hash(password, salt)
    return hashedPassword
  } catch (err) {
    return false
  }
}
