let AuthenticationError,ApolloError,UserInputError,prop,propOr,isEmpty,path,authenticate,MOVIE_NOT_FOUND,MOVIE_ALREADY_DELETED,UNAUTHORIZED,SERVER_ERROR;_841‍.x([["default",()=>_841‍.o]]);_841‍.w("apollo-server",[["AuthenticationError",["AuthenticationError"],function(v){AuthenticationError=v}],["ApolloError",["ApolloError"],function(v){ApolloError=v}],["UserInputError",["UserInputError"],function(v){UserInputError=v}]]);_841‍.w("ramda",[["prop",["prop"],function(v){prop=v}],["propOr",["propOr"],function(v){propOr=v}],["isEmpty",["isEmpty"],function(v){isEmpty=v}],["path",["path"],function(v){path=v}]]);_841‍.w("../../auth",[["authenticate",["authenticate"],function(v){authenticate=v}]]);_841‍.w("../../messages",[["MOVIE_NOT_FOUND",["MOVIE_NOT_FOUND"],function(v){MOVIE_NOT_FOUND=v}],["MOVIE_ALREADY_DELETED",["MOVIE_ALREADY_DELETED"],function(v){MOVIE_ALREADY_DELETED=v}],["UNAUTHORIZED",["UNAUTHORIZED"],function(v){UNAUTHORIZED=v}],["SERVER_ERROR",["SERVER_ERROR"],function(v){SERVER_ERROR=v}]]);











const resolvers = {
  Query: {
    getMovie: async (parent, args, ctx) => {
      try {
        const payload = await _841‍.a("authenticate",authenticate)(ctx.token)
        if (!payload) return new (_841‍.a("AuthenticationError",AuthenticationError))((_841‍.a("UNAUTHORIZED",UNAUTHORIZED)))

        const movie = await ctx.Movie.findOne({ _id: _841‍.a("prop",prop)('_id')(args), isDeleted: false })
        if (!movie) return new (_841‍.a("UserInputError",UserInputError))((_841‍.a("MOVIE_NOT_FOUND",MOVIE_NOT_FOUND)))

        return movie.movieID
      } catch (e) {
        _841‍.g.console.log(e)
        return new (_841‍.a("ApolloError",ApolloError))((_841‍.a("SERVER_ERROR",SERVER_ERROR)), '500')
      }
    },
    getMovies: async (parent, args, ctx) => {
      try {
        const payload = await _841‍.a("authenticate",authenticate)(ctx.token)
        if (!payload) return new (_841‍.a("AuthenticationError",AuthenticationError))((_841‍.a("UNAUTHORIZED",UNAUTHORIZED)))

        const limit = Number(_841‍.a("propOr",propOr)(0, 'page')(args)) ? Number(_841‍.a("propOr",propOr)(0, 'pageSize')(args)) : 0
        const skip = (limit * Number(_841‍.a("propOr",propOr)(0, 'page')(args))) - limit

        const orFilter = []
        if (_841‍.a("prop",prop)('movieID')(args)) orFilter.push({ movieID: _841‍.a("prop",prop)('movieID')(args) })
        if (_841‍.a("prop",prop)('name')(args)) orFilter.push({ name: _841‍.a("prop",prop)('name')(args) })
        if (_841‍.a("prop",prop)('description')(args)) orFilter.push({ description: _841‍.a("prop",prop)('description')(args) })


        const match = _841‍.a("isEmpty",isEmpty)(orFilter)
          ? { isDeleted: _841‍.a("propOr",propOr)(false, 'isDeleted')(args) }
          : { $or: orFilter, isDeleted: _841‍.a("propOr",propOr)(false, 'isDeleted')(args) }

        const movies = await ctx.Movie.find(match).skip(skip).limit(limit)

        const count = await ctx.Movie.count(match)

        return { totalCount: count, items: movies }
      } catch (e) {
        _841‍.g.console.log(e)
        return new (_841‍.a("ApolloError",ApolloError))((_841‍.a("SERVER_ERROR",SERVER_ERROR)), '500')
      }
    },
  },
  Mutation: {
    addMovie: async (parent, args, ctx) => {
      try {
        const payload = await _841‍.a("authenticate",authenticate)(ctx.token)
        if (!payload) return new (_841‍.a("AuthenticationError",AuthenticationError))((_841‍.a("UNAUTHORIZED",UNAUTHORIZED)))

        const movie = new ctx.Movie({
          movieID: _841‍.a("prop",prop)('movieID')(args),
          name: _841‍.a("prop",prop)('name')(args),
          description: _841‍.a("prop",prop)('description')(args),
        })
        await movie.save()

        return movie.movieID
      } catch (e) {
        _841‍.g.console.log(e)
        return new (_841‍.a("ApolloError",ApolloError))((_841‍.a("SERVER_ERROR",SERVER_ERROR)), '500')
      }
    },

    deleteMovie: async (parent, args, ctx) => {
        try {
          const payload = await _841‍.a("authenticate",authenticate)(ctx.token)
          if (!payload) return new (_841‍.a("AuthenticationError",AuthenticationError))((_841‍.a("UNAUTHORIZED",UNAUTHORIZED)))

          const movie = await ctx.Movie.findOne({ _id: _841‍.a("prop",prop)('_id')(args), isDeleted: false })
          if (!movie) return new (_841‍.a("UserInputError",UserInputError))((_841‍.a("MOVIE_NOT_FOUND",MOVIE_NOT_FOUND)))
          if(movie.isDeleted) return new (_841‍.a("UserInputError",UserInputError))((_841‍.a("MOVIE_ALREADY_DELETED",MOVIE_ALREADY_DELETED)))
          
          movie.isDeleted = true
          await movie.save()

          return movie.movieID
        }
        catch(e){
            _841‍.g.console.log(e)
            return new (_841‍.a("ApolloError",ApolloError))((_841‍.a("SERVER_ERROR",SERVER_ERROR)), '500')
        }
    }
  },
}

_841‍.d(resolvers);
