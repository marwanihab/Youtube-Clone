let mongoose,Movie,User;_a06‍.x([["Models",()=>Models],["cleanDb",()=>cleanDb],["connectDb",()=>connectDb],["disconnectDb",()=>disconnectDb],["generateMongooseId",()=>generateMongooseId]]);_a06‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_a06‍.w("../mongoose-models/Movie",[["default",["Movie"],function(v){Movie=v}]]);_a06‍.w("../mongoose-models/User",[["default",["User"],function(v){User=v}]]);



       const Models = {
    movie: Movie,
    user: User
};_a06‍.j(["Models"]); 

// export const _ensureIndexesRecursive = async(modelNames, currentIndex, done) => {
//     if (currentModelIndex < modelNames.length) {
//         var model = mongoose.model(modelNames[currentIndex++]);
//         model.ensureIndexes(function(error) {
//             if (error) {
//                 return done(error);
//             }
//             _ensureIndexesRecursive(modelNames, currentIndex, done);
//         });
//     }
//     else {
//         done();
//     }
// }
// export const CleanDatabase= async(done) => {
   
//     mongoose.connection.db.dropDatabase();
//     var modelNames = mongoose.modelNames();
//     _ensureIndexesRecursive(modelNames, 0, done);
//     done()

// }

       const cleanDb = async(done) => {
    await Models.movie.deleteMany({});
    await Models.user.deleteMany({});
    done()
};_a06‍.j(["cleanDb"]);


       const connectDb = async() => {
    const connection = await _a06‍.a("mongoose",mongoose).connect('mongodb://marwan.ihab:dbadmin1@ds121349.mlab.com:21349/video-share-app-test',
    { useNewUrlParser: true, useCreateIndex: true, useUnifiedTopology: true })
    return connection
};_a06‍.j(["connectDb"]);

       const disconnectDb = async (done = () => {}) => {
    _a06‍.a("mongoose",mongoose).disconnect(done)
};_a06‍.j(["disconnectDb"]);

       const generateMongooseId = () => {
    return _a06‍.a("mongoose",mongoose).Types.ObjectId()
  };_a06‍.j(["generateMongooseId"]);

  

