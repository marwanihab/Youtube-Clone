let appModule,createTestClient,ApolloServer,Models,connectDb,disconnectDb,expect,gql,authenticate,hashPassword;_821‍.w("../../modules/app",[["default",["appModule"],function(v){appModule=v}]]);_821‍.w("apollo-server-testing",[["createTestClient",["createTestClient"],function(v){createTestClient=v}]]);_821‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_821‍.w("../db-test",[["Models",["Models"],function(v){Models=v}],["connectDb",["connectDb"],function(v){connectDb=v}],["disconnectDb",["disconnectDb"],function(v){disconnectDb=v}]]);_821‍.w("chai",[["expect",["expect"],function(v){expect=v}]]);_821‍.w("../../auth",[["authenticate",["authenticate"],function(v){authenticate=v}],["hashPassword",["hashPassword"],function(v){hashPassword=v}]]);_821‍.w("mocha");








const server = new (_821‍.a("ApolloServer",ApolloServer))({
    schema:  _821‍.a("appModule",appModule).schema,
    context: () => ({ token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RVc2VyIiwiaWF0IjoxNTc1NDI2NzI2fQ.kWQQdaUWlUmY40dkZ4igKQ0Ml_BwrLVdoQebkqsZOVU' })
    }) 

const { query, mutate } = _821‍.a("createTestClient",createTestClient)(server)  
  
before(function (){
    _821‍.a("connectDb",connectDb)()
})
after(function(){_821‍.a("disconnectDb",disconnectDb)()})

describe('Running integration tests of the user', function() {
    this.timeout(10000)

    it('should login user', async() =>{
     const password = await _821‍.a("hashPassword",hashPassword)("M123456?m", "testUserIntegration")
     const user = await _821‍.a("Models",Models).user.create({username:'testUserIntegration', password:password})
     
     await user.save()

     const mutation = gql `
      mutation logIn{
        login(username: "testUserIntegration", password:"M123456?m"){
          token
          username
        }
      }
     `
     const res = await mutate(
           {mutation : mutation}
         )   
     _821‍.a("expect",expect)(res.data.login.username).to.equal('testUserIntegration')

  
    })

    it('should add user', async() =>{
 
      const mutation = gql `
      mutation addUser{
          addUser(username: "testUserAdded", password:"M123456?m"){
            token
            username
          }
         }
      `
      const res = await mutate(
            {mutation : mutation}
          )   
      _821‍.a("expect",expect)(res.data.addUser.username).to.equal('testUserAdded')
 
   
     })
})
    