let ApolloServer,mongoose,pathOr,prop,path,propOr,environment,appModule;_7f8‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_7f8‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_7f8‍.w("ramda",[["pathOr",["pathOr"],function(v){pathOr=v}],["prop",["prop"],function(v){prop=v}],["path",["path"],function(v){path=v}],["propOr",["propOr"],function(v){propOr=v}]]);_7f8‍.w("./environment",[["default",["environment"],function(v){environment=v}]]);_7f8‍.w("./modules/app",[["default",["appModule"],function(v){appModule=v}]]);







const DB_URI = pathOr('mongodb://marwan.ihab:dbadmin1@ds029675.mlab.com:29675/video-share-app', ['DB_URI'], process.env)

// connecting to database server. options passed to avoid deprecation warnings
mongoose.connect(DB_URI, { useNewUrlParser: true, useUnifiedTopology: true }, () => {
  console.log(`connected to database @ ${DB_URI}`)
})
_7f8‍.g.console.log(path(['apollo', 'introspection'], environment))
const server = new ApolloServer({
  schema: prop('schema', appModule),
  introspection: path(['apollo', 'introspection'], environment),
  playground: path(['apollo', 'playground'], environment),
  context: ({ req }) => {
    const header = propOr(null, 'authorization')(req.headers)
    if (header) return { token: header.split(' ')[1] }
    return { token: null }
  },
})

server.listen(environment.port)
  .then(({ url }) => console.log(`Server ready at ${url}. `))

if (module.hot) {
  module.hot.accept()
  module.hot.dispose(() => server.stop())
}
