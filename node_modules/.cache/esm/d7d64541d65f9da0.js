let Models,connectDb,disconnectDb,generateMongooseId,cleanDb,resolver,expect;_d65‍.x([["token",()=>token]]);_d65‍.w("../db-test",[["Models",["Models"],function(v){Models=v}],["connectDb",["connectDb"],function(v){connectDb=v}],["disconnectDb",["disconnectDb"],function(v){disconnectDb=v}],["generateMongooseId",["generateMongooseId"],function(v){generateMongooseId=v}],["cleanDb",["cleanDb"],function(v){cleanDb=v}]]);_d65‍.w("../../modules/user/resolvers",[["default",["resolver"],function(v){resolver=v}]]);_d65‍.w("chai",[["expect",["expect"],function(v){expect=v}]]);_d65‍.w("mocha");






before(function (){
    _d65‍.a("connectDb",connectDb)()
})
after(function(){_d65‍.a("disconnectDb",disconnectDb)()})

var loginToken = ""


describe('Running unit tests of the user', function() {
       this.timeout(20000)
        it('should add user', async ()=>{
            const result = await _d65‍.a("resolver",resolver).Mutation.addUser({}, {username: 'testUser',  password:'M123456?m'}, {User: _d65‍.a("Models",Models).user})
            const user = await _d65‍.a("Models",Models).user.findOne({username: 'testUser', isDeleted:'false'})
            _d65‍.a("expect",expect)(result.username + '').to.equal(user.username + '')
            
        })  

        it('should fail when adding an existed username', async()=> {
            const result = await _d65‍.a("resolver",resolver).Mutation.addUser({}, {username: 'testUser',  password:'M123456?m'}, {User: _d65‍.a("Models",Models).user})
            _d65‍.a("expect",expect)(result + '').to.equal('UserInputError: username already exists')
        })

        it('should fail when adding a wrong password format', async()=> {
            const result = await _d65‍.a("resolver",resolver).Mutation.addUser({}, {username: 'testUser',  password:'M123456'}, {User: _d65‍.a("Models",Models).user})
            _d65‍.a("expect",expect)(result + '').to.equal('UserInputError: password must contain an uppercase letter, a lowercase letter and a number.')
        })


        loginToken = ""
        it('should login user', async ()=>{
            const result = await _d65‍.a("resolver",resolver).Mutation.login({}, {username: 'testUser',  password:'M123456?m'}, {User: _d65‍.a("Models",Models).user})
            loginToken = result.token
            const user = await _d65‍.a("Models",Models).user.findOne({username: 'testUser', isDeleted:'false'})
            _d65‍.a("expect",expect)(result.username + '').to.equal(user.username + '')


        })  

        it('should fail when login with wrong wrong password', async ()=> {
            const result = await _d65‍.a("resolver",resolver).Mutation.login({}, {username: 'testUser',  password:'M12345?r'}, {User: _d65‍.a("Models",Models).user})
            _d65‍.a("expect",expect)(result + '').to.equal('AuthenticationError: invalid credentials')
        })

        it('should edit user', async ()=>{
            const result = await _d65‍.a("resolver",resolver).Mutation.editUser(
                {}, {
                    username: 'testUser',  
                    password:'M123456?m',
                    newPassword:'M123456?r'
                }, 

                    {User: _d65‍.a("Models",Models).user,
                    token : loginToken    
                    } )
            _d65‍.a("expect",expect)(result + '').to.equal('PASSWORD changed succesfuly')        

        })
        
        it('should fail when editting with wrong username', async ()=> {
            const result = await _d65‍.a("resolver",resolver).Mutation.editUser(
                {}, {
                    username: 'test',  
                    password:'M123456?m',
                    newPassword:'M123456?r'
                }, 

                    {User: _d65‍.a("Models",Models).user,
                    token : loginToken    
                    } )

            _d65‍.a("expect",expect)(result + '').to.equal('UserInputError: USER not found')
        })
        
        it('should fail when editting with wrong password credential', async ()=> {
            const result = await _d65‍.a("resolver",resolver).Mutation.editUser(
                {}, {
                    username: 'testUser',  
                    password:'M123456?m',
                    newPassword:'M123456?r'
                }, 

                    {User: _d65‍.a("Models",Models).user,
                    token : loginToken    
                    } )

            _d65‍.a("expect",expect)(result + '').to.equal('AuthenticationError: invalid credentials')
        })

        it('should fail when editting with wrong password format', async ()=> {
            const result = await _d65‍.a("resolver",resolver).Mutation.editUser(
                {}, {
                    username: 'testUser',  
                    password:'M123456?r',
                    newPassword:'M123456'
                }, 

                    {User: _d65‍.a("Models",Models).user,
                    token : loginToken    
                    } )

            _d65‍.a("expect",expect)(result + '').to.equal('UserInputError: password must contain an uppercase letter, a lowercase letter and a number.')
        })


        it('should delete user', async() =>{
            const result = await _d65‍.a("resolver",resolver).Mutation.deleteUser(
                {}, {
                    username: 'testUser',  
                }, 

                    {User: _d65‍.a("Models",Models).user,
                    token : loginToken    
                    }
            )
            const user = await _d65‍.a("Models",Models).user.findOne({_id: result})
            _d65‍.a("expect",expect)(user.isDeleted + '').to.equal('true')

        })

        it('should fail when delete with wrong username', async() =>{
            _d65‍.g.console.log(loginToken)
            const result = await _d65‍.a("resolver",resolver).Mutation.deleteUser(
                {}, {
                    username: 'test',  
                }, 

                    {User: _d65‍.a("Models",Models).user,
                    token : loginToken    
                    }
            )
            _d65‍.a("expect",expect)(result + '').to.equal('UserInputError: USER not found')
        })
            
   
    })


       const token = loginToken;_d65‍.j(["token"]);
