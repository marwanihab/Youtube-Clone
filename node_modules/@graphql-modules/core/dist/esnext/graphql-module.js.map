{"version":3,"file":"graphql-module.js","sourceRoot":"","sources":["../../src/graphql-module.ts"],"names":[],"mappings":"AACA,OAAO,EACL,cAAc,EAEd,gBAAgB,EAChB,YAAY,EACZ,iBAAiB,EACjB,uCAAuC,EACvC,aAAa,EACb,yBAAyB,EAC1B,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAY,QAAQ,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACxE,OAAO,EAAgB,aAAa,EAAE,KAAK,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAChF,OAAO,EACL,mBAAmB,EACnB,8BAA8B,EAC9B,oBAAoB,EACpB,yBAAyB,EAC1B,MAAM,UAAU,CAAC;AAClB,OAAO,KAAK,SAAS,MAAM,WAAW,CAAC;AACvC,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAE1D,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAC;AACtD,OAAO,EAAiB,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAuGxE;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,MAA4E,EAAE,EAAE;IAC3G,IAAI,MAAM,YAAY,QAAQ,EAAE;QAC9B,MAAM,GAAG,MAAM,EAAE,CAAC;KACnB;IACD,IAAI,MAAM,YAAY,aAAa,EAAE;QACnC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;KACtB;IACD,OAAO,MAAM,CAAC,GAAG,CAAC,gBAAgB,MAAM,EAAE,CAAC,CAAC;AAC9C,CAAC,CAAC;AAwBF;;;;;;GAMG;AACH,MAAM,OAAO,aAAa;IA8BxB;;;OAGG;IACH,YACU,WAA0E,EAAE,EAC5E,aAAsB;QADtB,aAAQ,GAAR,QAAQ,CAAoE;QAC5E,kBAAa,GAAb,aAAa,CAAS;QA9BxB,WAAM,GAAkC;YAC9C,QAAQ,EAAE,SAAS;YACnB,MAAM,EAAE,SAAS;YACjB,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,SAAS;YACpB,gBAAgB,EAAE,SAAS;YAC3B,cAAc,EAAE,SAAS;YACzB,YAAY,EAAE,SAAS;YACvB,kBAAkB,EAAE,SAAS;YAC7B,iBAAiB,EAAE,SAAS;YAC5B,OAAO,EAAE,SAAS;YAClB,iBAAiB,EAAE,SAAS;YAC5B,UAAU,EAAE,SAAS;SACtB,CAAC;QAEM,gBAAW,GAA8B;YAC/C,WAAW,EAAE,SAAS;YACtB,aAAa,EAAE,SAAS;YACxB,cAAc,EAAE,SAAS;YACzB,aAAa,EAAE,SAAS;SACzB,CAAC;QAEM,0BAAqB,GAAG,IAAI,KAAK,EAAU,CAAC;QA4f5C,gCAA2B,GAAG,IAAI,OAAO,EAAqB,CAAC;QAC/D,sCAAiC,GAAG,IAAI,OAAO,EAAqB,CAAC;QA0mBrE,wBAAmB,GAAG,IAAI,OAAO,EAA4C,CAAC;IA9lCnF,CAAC;IAEJ;;;OAGG;IACH,OAAO,CAAC,MAAc;QACpB,IAAI,CAAC,aAAa,GAAG;YACnB,GAAG,IAAI,CAAC,aAAa;YACrB,GAAG,MAAM;SACV,CAAC;QACF,cAAc;QACd,IAAI,CAAC,MAAM,GAAG;YACZ,QAAQ,EAAE,SAAS;YACnB,MAAM,EAAE,SAAS;YACjB,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,SAAS;YACpB,gBAAgB,EAAE,SAAS;YAC3B,cAAc,EAAE,SAAS;YACzB,YAAY,EAAE,SAAS;YACvB,kBAAkB,EAAE,SAAS;YAC7B,iBAAiB,EAAE,SAAS;YAC5B,OAAO,EAAE,SAAS;YAClB,iBAAiB,EAAE,SAAS;YAC5B,UAAU,EAAE,SAAS;SACtB,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,QAAQ,CAAC,MAAc;QACrB,IAAI,MAAM,EAAE;YACV,OAAO,IAAI,aAAa,CAA0C,IAAI,CAAC,QAAQ,EAAE;gBAC/E,GAAG,IAAI,CAAC,aAAa;gBACrB,GAAG,MAAM;aACV,CAAC,CAAC;SACJ;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED,wBAAwB,CAAC,oBAA8B;QACrD,MAAM,SAAS,GAAG,IAAI,aAAa,CAA0C,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAChH,SAAS,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;QACvD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,MAAM,GAAG;YACZ,QAAQ,EAAE,SAAS;YACnB,MAAM,EAAE,SAAS;YACjB,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,SAAS;YACpB,gBAAgB,EAAE,SAAS;YAC3B,cAAc,EAAE,SAAS;YACzB,YAAY,EAAE,SAAS;YACvB,kBAAkB,EAAE,SAAS;YAC7B,iBAAiB,EAAE,SAAS;YAC5B,OAAO,EAAE,SAAS;YAClB,iBAAiB,EAAE,SAAS;YAC5B,UAAU,EAAE,SAAS;SACtB,CAAC;IACJ,CAAC;IAED,IAAI,CAAC,YAAqD;QACxD,IAAI,YAAY,CAAC,cAAc,EAAE;YAC/B,MAAM,sBAAsB,GAAG,YAAY,CAAC,cAAc,CAAC;YAC3D,YAAY,CAAC,cAAc,GAAG,KAAK,EAAE,OAAgB,EAAE,cAAwB,EAAE,EAAE;gBACjF,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;gBACpC,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC/D,MAAM,eAAe,GAAG,iBAAiB,CAAC,QAAQ,CAAC;gBACnD,eAAe,CAAC,iBAAiB,GAAG,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;oBACnD,IACE,OAAO,QAAQ,KAAK,QAAQ;wBAC5B,OAAO,QAAQ,KAAK,SAAS;wBAC7B,OAAO,QAAQ,KAAK,QAAQ;wBAC5B,YAAY,IAAI,QAAQ;wBACxB,OAAO,QAAQ,CAAC,YAAY,CAAC,KAAK,UAAU,EAC5C;wBACA,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAAC;qBACvF;gBACH,CAAC,CAAC;gBACF,MAAM,eAAe,CAAC,gBAAgB,CAAC;oBACrC,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,CAAC,iBAAiB,CAAC;oBACzB,WAAW,EAAE,IAAI;oBACjB,KAAK,EAAE,IAAI;iBACZ,CAAC,CAAC;gBACH,OAAO;oBACL,QAAQ,EAAE,eAAe;oBACzB,GAAG,sBAAsB,CAAC,OAAO,EAAE,cAAc,CAAC;iBACnD,CAAC;YACJ,CAAC,CAAC;SACH;QACD,IAAI,CAAC,MAAM,GAAG;YACZ,GAAG,IAAI,CAAC,MAAM;YACd,GAAG,YAAY;SAChB,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS;QACP,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,kBAAkB;QACxB,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvD,MAAM,IAAI,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChD;IACH,CAAC;IAED,IAAI,IAAI;QACN,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YACvB,MAAM,WAAW,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;YACxD,MAAM,YAAY,GAAG,GAAG,EAAE;gBACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAC5F,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;oBAC1E,OAAO,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC;iBAC9D;gBACD,OAAO,QAAQ,CAAC;YAClB,CAAC,CAAC;YACF,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,YAAY,EAAE,CAAC;SACrC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC5B,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,IAAI,MAAM;QACR,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,WAAW,EAAE;YAC7C,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YACrC,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;YACzF,IAAI;gBACF,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;gBACvC,MAAM,yBAAyB,GAAG,IAAI,CAAC,wCAAwC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACpG,MAAM,oCAAoC,GAAG,IAAI,CAAC,mDAAmD,CACnG,IAAI,CAAC,wBAAwB,CAC9B,CAAC;gBACF,MAAM,6BAA6B,GAAG,IAAI,CAAC,6BAA6B,CAAC;gBACzE,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAC/C,IAAI,cAAc,CAAC,MAAM,IAAI,YAAY,IAAI,gBAAgB,CAAC,MAAM,EAAE;oBACpE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,YAAY,CAAC;wBAChC,OAAO,EAAE,CAAC,GAAG,cAAc,EAAE,GAAG,gBAAgB,CAAC;wBACjD,QAAQ,EAAE,YAAY,IAAI,SAAS;wBACnC,SAAS,EAAE,yBAAyB;wBACpC,oBAAoB,EAAE,oCAAoC;wBAC1D,yBAAyB,EAAE,6BAA6B;wBACxD,MAAM,EACJ,aAAa,IAAI,IAAI,CAAC,UAAU;4BAC9B,CAAC,CAAC;gCACE,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC;6BACrD;4BACH,CAAC,CAAC,SAAS;wBACf,UAAU,EAAE,IAAI,CAAC,qBAAqB;qBACvC,CAAC,CAAC;iBACJ;qBAAM;oBACL,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;iBAC3B;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,CAAC,OAAO,KAAK,uBAAuB,EAAE;oBACzC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;iBAC3B;qBAAM,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC,EAAE;oBACzF,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC;oBACxF,MAAM,IAAI,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpD;qBAAM;oBACL,MAAM,IAAI,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;iBACrD;aACF;YACD,IAAI,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjC,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBAC5E,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;aAC9C;SACF;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5B,CAAC;IAED,IAAI,WAAW;QACb,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,WAAW,EAAE;YAC7C,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,KAAK,WAAW,EAAE;gBACvD,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;oBACnE,IAAI;wBACF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;4BACvB,IAAI,CAAC,kBAAkB,EAAE,CAAC;4BAC1B,IAAI;gCACF,MAAM,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC;gCAClD,MAAM,+BAA+B,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CACnF,IAAI,CAAC,wCAAwC,CAAC,aAAa,CAAC,CAC7D,CAAC;gCACF,MAAM,CAAC,YAAY,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,cAAc,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;oCACpG,kBAAkB;oCAClB,+BAA+B;oCAC/B,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC;oCACnD,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;iCAC9F,CAAC,CAAC;gCACH,MAAM,oCAAoC,GAAG,IAAI,CAAC,mDAAmD,CACnG,IAAI,CAAC,wBAAwB,CAC9B,CAAC;gCACF,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;gCACnC,MAAM,6BAA6B,GAAG,IAAI,CAAC,6BAA6B,CAAC;gCACzE,IAAI,cAAc,CAAC,MAAM,IAAI,YAAY,IAAI,gBAAgB,CAAC,MAAM,EAAE;oCACpE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,iBAAiB,CAAC;wCAC3C,OAAO,EAAE,CAAC,GAAG,cAAc,EAAE,GAAG,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wCAChE,QAAQ,EAAE,YAAY,IAAI,SAAS;wCACnC,SAAS,EAAE,yBAAyB;wCACpC,oBAAoB,EAAE,oCAAoC;wCAC1D,yBAAyB,EAAE,6BAA6B;wCACxD,MAAM,EACJ,aAAa,IAAI,UAAU;4CACzB,CAAC,CAAC;gDACE,GAAG,EAAE,CAAC,OAAuB,EAAE,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC;6CAClE;4CACH,CAAC,CAAC,SAAS;wCACf,UAAU,EAAE,IAAI,CAAC,qBAAqB;qCACvC,CAAC,CAAC;iCACJ;qCAAM;oCACL,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;iCAC3B;6BACF;4BAAC,OAAO,CAAC,EAAE;gCACV,IAAI,CAAC,CAAC,OAAO,KAAK,uBAAuB,EAAE;oCACzC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;iCAC3B;qCAAM,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC,EAAE;oCACzF,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC;oCACxF,MAAM,IAAI,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;iCACpD;qCAAM;oCACL,MAAM,IAAI,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;iCACrD;6BACF;4BACD,IAAI,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE;gCACjC,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gCAC5E,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;6BAC9C;yBACF;wBACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;qBAC7B;oBAAC,OAAO,CAAC,EAAE;wBACV,MAAM,CAAC,CAAC,CAAC,CAAC;qBACX;gBACH,CAAC,CAAC,CAAC;aACJ;YACD,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;SACrC;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,WAAW,EAAE;YAC/C,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAU;gBAC7D,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,aAAa,EAAE,aAAa,CAAC,WAAW;gBACxC,oBAAoB,EAAE,IAAI,CAAC,wBAAwB;gBACnD,KAAK,EAAE;oBACL,QAAQ;oBACR,WAAW;oBACX,YAAY;oBACZ,SAAS;oBACT,WAAW;oBACX,aAAa;oBACb,qBAAqB;oBACrB,cAAc;iBACf;gBACD,gBAAgB,EAAE,IAAI,CAAC,aAAa;gBACpC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;aAC1D,CAAC,CAAC,CAAC;YACJ,QAAQ,CAAC,iBAAiB,GAAG,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;gBAC5C,IACE,OAAO,QAAQ,KAAK,QAAQ;oBAC5B,OAAO,QAAQ,KAAK,SAAS;oBAC7B,OAAO,QAAQ,KAAK,QAAQ;oBAC5B,YAAY,IAAI,QAAQ;oBACxB,OAAO,QAAQ,CAAC,YAAY,CAAC,KAAK,UAAU,EAC5C;oBACA,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;iBACnD;YACH,CAAC,CAAC;YACF,QAAQ,CAAC,gBAAgB,CAAC;gBACxB,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,CAAC,IAAI,CAAC;gBACZ,WAAW,EAAE,IAAI;gBACjB,KAAK,EAAE,KAAK;aACb,CAAC,CAAC;SACJ;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC9B,CAAC;IAED,IAAI,aAAa;QACf,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,WAAW,EAAE;YAC/C,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,KAAK,WAAW,EAAE;gBACzD,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;oBACrE,IAAI;wBACF,IAAI,CAAC,kBAAkB,EAAE,CAAC;wBAC1B,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;4BACrD,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC;4BAChD,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;yBAChG,CAAC,CAAC;wBACH,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAU;4BAC7D,IAAI,EAAE,IAAI,CAAC,IAAI;4BACf,aAAa,EAAE,aAAa,CAAC,WAAW;4BACxC,oBAAoB,EAAE,IAAI,CAAC,wBAAwB;4BACnD,KAAK,EAAE;gCACL,QAAQ;gCACR,WAAW;gCACX,YAAY;gCACZ,SAAS;gCACT,WAAW;gCACX,aAAa;gCACb,qBAAqB;gCACrB,cAAc;6BACf;4BACD,gBAAgB;4BAChB,QAAQ;yBACT,CAAC,CAAC,CAAC;wBACJ,QAAQ,CAAC,iBAAiB,GAAG,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;4BAC5C,IACE,OAAO,QAAQ,KAAK,QAAQ;gCAC5B,OAAO,QAAQ,KAAK,SAAS;gCAC7B,OAAO,QAAQ,KAAK,QAAQ;gCAC5B,YAAY,IAAI,QAAQ;gCACxB,OAAO,QAAQ,CAAC,YAAY,CAAC,KAAK,UAAU,EAC5C;gCACA,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;6BACnD;wBACH,CAAC,CAAC;wBACF,MAAM,QAAQ,CAAC,gBAAgB,CAAC;4BAC9B,IAAI,EAAE,QAAQ;4BACd,IAAI,EAAE,CAAC,IAAI,CAAC;4BACZ,WAAW,EAAE,IAAI;4BACjB,KAAK,EAAE,IAAI;yBACZ,CAAC,CAAC;wBACH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;qBAC/B;oBAAC,OAAO,CAAC,EAAE;wBACV,MAAM,CAAC,CAAC,CAAC,CAAC;qBACX;gBACH,CAAC,CAAC,CAAC;aACJ;YACD,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;SACvC;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,YAAY;QACd,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YACnC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YACrC,MAAM,mBAAmB,GAAG,WAAW;iBACpC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC;iBAClC,MAAM,CAAC,CAAC,YAAY,EAAE,kBAAkB,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7F,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,mBAAmB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;SACzE;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,WAAW,EAAE;YAC/C,IAAI,WAAW,GAAG,IAAI,KAAK,EAAgC,CAAC;YAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YACrC,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE;gBAChC,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC;gBACvC,IAAI,cAAc,EAAE;oBAClB,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAClC;aACF;YACD,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACvC,IAAI,YAAY,EAAE;gBAChB,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aAChC;YACD,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACpD,IAAI,WAAW,CAAC,MAAM,EAAE;gBACtB,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,aAAa,CAAC,WAAW,EAAE;oBAChD,UAAU,EAAE,IAAI,CAAC,qBAAqB;oBACtC,mBAAmB,EAAE,KAAK;iBAC3B,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;aAC7B;SACF;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC9B,CAAC;IAED,IAAI,aAAa;QACf,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,WAAW,EAAE;YAC/C,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE;gBACzC,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;oBACrE,IAAI;wBACF,MAAM,CAAC,YAAY,EAAE,eAAe,EAAE,YAAY,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;4BACtE,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC;4BACnD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAM,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;4BACtE,IAAI,CAAC,iBAAiB;yBACvB,CAAC,CAAC;wBACH,MAAM,QAAQ,GAAG,eAAe,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;wBAC3E,IAAI,QAAQ,CAAC,MAAM,EAAE;4BACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;gCAC5D,UAAU,EAAE,IAAI,CAAC,qBAAqB;gCACtC,mBAAmB,EAAE,KAAK;6BAC3B,CAAC,CAAC;yBACJ;6BAAM;4BACL,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;yBAC7B;wBACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;qBAC/B;oBAAC,OAAO,CAAC,EAAE;wBACV,MAAM,CAAC,CAAC,CAAC,CAAC;qBACX;gBACH,CAAC,CAAC,CAAC;aACJ;YACD,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;SACvC;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,SAAS;QACX,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,KAAK,WAAW,EAAE;YAChD,MAAM,qBAAqB,GAAG,IAAI,KAAK,EAAa,CAAC;YACrD,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YACrC,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE;gBAChC,MAAM,eAAe,GAAG,MAAM,CAAC,SAAS,CAAC;gBACzC,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAC7C;YACD,MAAM,SAAS,GAAG,IAAI,CAAC,wCAAwC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACpF,MAAM,oBAAoB,GAAG,IAAI,CAAC,mDAAmD,CACnF,IAAI,CAAC,wBAAwB,CAC9B,CAAC;YACF,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtC,MAAM,iBAAiB,GAAG,gBAAgB,CACxC,cAAc,CAAC,qBAAqB,EAAE;gBACpC,UAAU,EAAE,IAAI,CAAC,qBAAqB;aACvC,CAAC,EACF,oBAAoB,CACrB,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,iBAAiB,CAAC;SAC3C;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IAC/B,CAAC;IAED,IAAI,cAAc;QAChB,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,KAAK,WAAW,EAAE;YAChD,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,KAAK,WAAW,EAAE;gBAC1D,IAAI,CAAC,WAAW,CAAC,cAAc,GAAG,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;oBACtE,IAAI;wBACF,MAAM,qBAAqB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;4BAC9C,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAM,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC;4BAC7D,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAC3C,IAAI,CAAC,wCAAwC,CAAC,aAAa,CAAC,CAC7D;yBACF,CAAC,CAAC;wBACH,MAAM,oBAAoB,GAAG,IAAI,CAAC,mDAAmD,CACnF,IAAI,CAAC,wBAAwB,CAC9B,CAAC;wBACF,MAAM,iBAAiB,GAAG,gBAAgB,CACxC,cAAc,CAAC,qBAAqB,EAAE;4BACpC,UAAU,EAAE,IAAI,CAAC,qBAAqB;yBACvC,CAAC,EACF,oBAAoB,CACrB,CAAC;wBACF,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,iBAAiB,CAAC;wBAC1C,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;qBAChC;oBAAC,OAAO,CAAC,EAAE;wBACV,MAAM,CAAC,CAAC,CAAC,CAAC;qBACX;gBACH,CAAC,CAAC,CAAC;aACJ;YACD,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC;SACxC;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,gBAAgB;QAClB,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,KAAK,WAAW,EAAE;YACvD,MAAM,mBAAmB,GAAG,IAAI,KAAK,EAAoB,CAAC;YAC1D,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YACrC,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE;gBAChC,MAAM,sBAAsB,GAAG,MAAM,CAAC,gBAAgB,CAAC;gBACvD,mBAAmB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;aAClD;YACD,MAAM,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;YACvD,MAAM,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC;YAC3D,KAAK,MAAM,aAAa,IAAI,sBAAsB,EAAE;gBAClD,oBAAoB,CAAC,aAAa,CAAC,GAAG,uCAAuC,CAC3E,sBAAsB,CAAC,aAAa,CAAC,CACtC,CAAC;aACH;YACD,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,gBAAgB,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB,CAAC,CAAqB,CAAC;SAC5F;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;IACtC,CAAC;IAID,IAAI,aAAa;QACf,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,KAAK,WAAW,EAAE;YACxD,MAAM,iBAAiB,GAAG,IAAI,KAAK,EAAqB,CAAC;YACzD,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YACrC,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE;gBAChC,MAAM,uBAAuB,GAAG,MAAM,CAAC,aAAa,CAAC;gBACrD,IAAI,uBAAuB,EAAE;oBAC3B,iBAAiB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;iBACjD;aACF;YACD,IAAI,CAAC,MAAM,CAAC,iBAAiB,GAAG;gBAC9B,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,iBAAiB,EAAE,EAAE;oBAC5D,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;wBAC5C,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAC1B,SAAS,EACT,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;4BACpC,IAAI;gCACF,MAAM,sBAAsB,GAAG,iBAAiB,CAAC,GAAG,CAClD,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,SAAS,IAAI,SAAS,CAAC,gBAAgB,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAChG,CAAC;gCACF,MAAM,qBAAqB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;gCACxE,MAAM,aAAa,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gCACrG,MAAM,uBAAuB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;gCACtE,MAAM,eAAe,GAAG,uBAAuB,CAAC,QAAQ,CAAC;gCACzD,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAC9B,EAAE,EACF,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC;oCACpB,eAAe,CAAC,gBAAgB,CAAC;wCAC/B,IAAI,EAAE,WAAW;wCACjB,IAAI,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,iBAAiB,CAAC;wCACtD,WAAW,EAAE,IAAI;wCACjB,KAAK,EAAE,IAAI;qCACZ,CAAC;oCACF,IAAI,CAAC,QAAQ,CAAC,iBAAiB;wCAC7B,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,SAAS;wCACzC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC,gBAAgB,EAAE,SAAS,EAAE,iBAAiB,CAAC;iCAC5F,CAAC,CAAC,CACJ,CAAC;gCACF,OAAO,CAAC;oCACN,GAAG,aAAa;oCAChB,GAAG,uBAAuB;oCAC1B,GAAG,UAAU;iCACd,CAAC,CAAC;6BACJ;4BAAC,OAAO,CAAC,EAAE;gCACV,MAAM,CAAC,CAAC,CAAC,CAAC;6BACX;wBACH,CAAC,CAAC,CACH,CAAC;qBACH;oBACD,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACjD,CAAC;gBACD,WAAW,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE;oBAC1C,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;wBACjD,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAClC,MAAM,EACN,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;4BACpC,IAAI;gCACF,MAAM,wBAAwB,GAAG,iBAAiB,CAAC,GAAG,CACpD,KAAK,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,WAAW,IAAI,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,CAClF,CAAC;gCACF,MAAM,uBAAuB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;gCAC5E,MAAM,aAAa,GAAG,uBAAuB,CAAC,MAAM,CAClD,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC,EAC5C,EAAE,CACH,CAAC;gCACF,MAAM,uBAAuB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gCACnE,MAAM,eAAe,GAAG,uBAAuB,CAAC,QAAQ,CAAC;gCACzD,MAAM,uBAAuB,GAAG,MAAM,CAAC,MAAM,CAC3C,EAAE,EACF,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC;oCACpB,eAAe,CAAC,gBAAgB,CAAC;wCAC/B,IAAI,EAAE,aAAa;wCACnB,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC;wCAClC,WAAW,EAAE,IAAI;wCACjB,KAAK,EAAE,IAAI;qCACZ,CAAC;oCACF,IAAI,CAAC,QAAQ,CAAC,iBAAiB;wCAC7B,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW;wCAC3C,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC;iCAC1E,CAAC,CAAC,CACJ,CAAC;gCACF,OAAO,CAAC;oCACN,GAAG,aAAa;oCAChB,GAAG,uBAAuB;oCAC1B,GAAG,MAAM;iCACV,CAAC,CAAC;6BACJ;4BAAC,OAAO,CAAC,EAAE;gCACV,MAAM,CAAC,CAAC,CAAC,CAAC;6BACX;wBACH,CAAC,CAAC,CACH,CAAC;qBACH;oBACD,OAAO,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACtD,CAAC;gBACD,mBAAmB,EAAE,CAAC,SAAS,EAAE,IAAS,EAAE,EAAE;oBAC5C,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;oBACxB,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;wBACrD,IAAI,CAAC,iCAAiC,CAAC,GAAG,CACxC,IAAI,EACJ,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;4BACpC,IAAI;gCACF,MAAM,gCAAgC,GAAG,iBAAiB,CAAC,GAAG,CAC5D,KAAK,EAAE,EAAE,mBAAmB,EAAE,EAAE,EAAE,CAAC,mBAAmB,IAAI,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,CAC/F,CAAC;gCACF,MAAM,+BAA+B,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;gCAC5F,MAAM,aAAa,GAAG,+BAA+B,CAAC,MAAM,CAC1D,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC,EAC5C,EAAE,CACH,CAAC;gCACF,MAAM,uBAAuB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gCAC9D,MAAM,eAAe,GAAG,uBAAuB,CAAC,QAAQ,CAAC;gCACzD,MAAM,+BAA+B,GAAG,MAAM,CAAC,MAAM,CACnD,EAAE,EACF,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC;oCACpB,eAAe,CAAC,gBAAgB,CAAC;wCAC/B,IAAI,EAAE,qBAAqB;wCAC3B,IAAI,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC;wCACvB,WAAW,EAAE,IAAI;wCACjB,KAAK,EAAE,IAAI;qCACZ,CAAC;oCACF,IAAI,CAAC,QAAQ,CAAC,iBAAiB;wCAC7B,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,mBAAmB;wCACnD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC;iCACvE,CAAC,CAAC,CACJ,CAAC;gCACF,OAAO,CAAC;oCACN,GAAG,aAAa;oCAChB,GAAG,+BAA+B;iCACnC,CAAC,CAAC;6BACJ;4BAAC,OAAO,CAAC,EAAE;gCACV,MAAM,CAAC,CAAC,CAAC,CAAC;6BACX;wBACH,CAAC,CAAC,CACH,CAAC;qBACH;oBACD,OAAO,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC1D,CAAC;gBACD,YAAY,EAAE,CAAC,SAAS,EAAE,iBAAiB,EAAE,EAAE;oBAC7C,SAAS,CAAC,yBAAyB,CAAC,GAAG,SAAS,CAAC,yBAAyB,CAAC,IAAI,IAAI,OAAO,EAAE,CAAC;oBAC7F,MAAM,sBAAsB,GAA0C,SAAS,CAAC,yBAAyB,CAAC,CAAC;oBAC3G,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;wBACrC,sBAAsB,CAAC,GAAG,CACxB,IAAI,EACJ,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;4BACpC,IAAI;gCACF,MAAM,yBAAyB,GAAG,iBAAiB,CAAC,GAAG,CACrD,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,YAAY,IAAI,YAAY,CAAC,SAAS,EAAE,iBAAiB,CAAC,CACvF,CAAC;gCACF,MAAM,wBAAwB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;gCAC9E,wBAAwB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gCAClF,MAAM,uBAAuB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;gCACtE,MAAM,eAAe,GAAG,uBAAuB,CAAC,QAAQ,CAAC;gCACzD,MAAM,OAAO,CAAC,GAAG,CAAC;oCAChB,eAAe,CAAC,gBAAgB,CAAC;wCAC/B,IAAI,EAAE,cAAc;wCACpB,IAAI,EAAE,CAAC,SAAS,EAAE,iBAAiB,CAAC;wCACpC,WAAW,EAAE,IAAI;wCACjB,KAAK,EAAE,IAAI;qCACZ,CAAC;oCACF,IAAI,CAAC,QAAQ,CAAC,iBAAiB;wCAC7B,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,YAAY;wCAC5C,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,YAAY,CAAC,SAAS,EAAE,iBAAiB,CAAC;iCAC7E,CAAC,CAAC;gCACH,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;gCACnC,OAAO,EAAE,CAAC;6BACX;4BAAC,OAAO,CAAC,EAAE;gCACV,MAAM,CAAC,CAAC,CAAC,CAAC;6BACX;wBACH,CAAC,CAAC,CACH,CAAC;qBACH;oBACD,OAAO,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC1C,CAAC;aACF,CAAC;SACH;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;IACvC,CAAC;IAED,IAAI,wBAAwB;QAC1B,IAAI,oBAAoB,GAAG,aAAa,CAAC,WAAW,CAAC;QACrD,MAAM,8BAA8B,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;QAC1E,IAAI,8BAA8B,EAAE;YAClC,IAAI,OAAO,8BAA8B,KAAK,UAAU,EAAE;gBACxD,oBAAoB,GAAG,8BAA8B,CAAC,IAAI,CAAC,CAAC;aAC7D;iBAAM;gBACL,oBAAoB,GAAG,8BAA8B,CAAC;aACvD;SACF;QACD,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED,IAAI,gBAAgB;QAClB,IAAI,YAAY,GAAG,IAAI,KAAK,EAAiB,CAAC;QAC9C,MAAM,uBAAuB,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;QAC3D,IAAI,uBAAuB,EAAE;YAC3B,IAAI,OAAO,uBAAuB,KAAK,UAAU,EAAE;gBACjD,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,YAAY,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAC;aAC9C;iBAAM;gBACL,YAAY,GAAG,uBAAuB,CAAC;aACxC;SACF;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,IAAI,YAAY;QACd,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,IAAI,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACjD,IAAI,mBAAmB,EAAE;YACvB,IAAI,OAAO,mBAAmB,KAAK,UAAU,EAAE;gBAC7C,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,mBAAmB,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;aACjD;YACD,IAAI,OAAO,mBAAmB,KAAK,QAAQ,EAAE;gBAC3C,QAAQ,GAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC;aACvC;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE;gBAC7C,mBAAmB,GAAG,mBAAmB,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;gBAC3F,IAAI,mBAAmB,CAAC,MAAM,EAAE;oBAC9B,QAAQ,GAAG,aAAa,CAAC,mBAAmB,EAAE;wBAC5C,mBAAmB,EAAE,KAAK;qBAC3B,CAAC,CAAC;iBACJ;aACF;iBAAM,IAAI,mBAAmB,YAAY,aAAa,EAAE;gBACvD,QAAQ,GAAG,KAAK,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,CAAC,CAAC;aAClE;iBAAM,IAAI,mBAAmB,YAAY,OAAO,EAAE;gBACjD,MAAM,IAAI,KAAK,CAAC;wBACA,IAAI,CAAC,IAAI;;SAExB,CAAC,CAAC;aACJ;iBAAM,IAAI,mBAAmB,EAAE;gBAC9B,QAAQ,GAAG,mBAAmB,CAAC;aAChC;SACF;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,IAAI,iBAAiB;QACnB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,IAAI;gBACF,IAAI,QAAQ,GAAG,IAAI,CAAC;gBACpB,IAAI,mBAAmB,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBACvD,IAAI,mBAAmB,EAAE;oBACvB,IAAI,OAAO,mBAAmB,KAAK,UAAU,EAAE;wBAC7C,IAAI,CAAC,kBAAkB,EAAE,CAAC;wBAC1B,mBAAmB,GAAG,MAAM,mBAAmB,CAAC,IAAI,CAAC,CAAC;qBACvD;oBACD,IAAI,OAAO,mBAAmB,KAAK,QAAQ,EAAE;wBAC3C,QAAQ,GAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC;qBACvC;yBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE;wBAC7C,mBAAmB,GAAG,mBAAmB,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;wBAC3F,IAAI,mBAAmB,CAAC,MAAM,EAAE;4BAC9B,QAAQ,GAAG,aAAa,CAAC,mBAAmB,EAAE;gCAC5C,mBAAmB,EAAE,KAAK;6BAC3B,CAAC,CAAC;yBACJ;qBACF;yBAAM,IAAI,mBAAmB,YAAY,aAAa,EAAE;wBACvD,QAAQ,GAAG,KAAK,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,CAAC,CAAC;qBAClE;yBAAM,IAAI,mBAAmB,EAAE;wBAC9B,QAAQ,GAAG,mBAAmB,CAAC;qBAChC;iBACF;gBACD,OAAO,CAAC,QAAQ,CAAC,CAAC;aACnB;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,CAAC;aACX;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,aAAa;QACf,IAAI,SAAS,GAAG,EAAmB,CAAC;QACpC,IAAI,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;QACnD,IAAI,oBAAoB,EAAE;YACxB,IAAI,OAAO,oBAAoB,KAAK,UAAU,EAAE;gBAC9C,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;aACvE;YACD,IAAI,oBAAoB,YAAY,OAAO,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC;yBACC,IAAI,CAAC,IAAI;;SAEzB,CAAC,CAAC;aACJ;YACD,IAAI,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE;gBACvC,oBAAoB,GAAG,cAAc,CAAC,oBAAoB,CAAC,CAAC;aAC7D;YACD,SAAS,GAAG,oBAAoB,CAAC;SAClC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,IAAI,kBAAkB;QACpB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,IAAI;gBACF,IAAI,SAAS,GAAG,EAAmB,CAAC;gBACpC,IAAI,oBAAoB,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;gBACzD,IAAI,oBAAoB,EAAE;oBACxB,IAAI,OAAO,oBAAoB,KAAK,UAAU,EAAE;wBAC9C,IAAI,CAAC,kBAAkB,EAAE,CAAC;wBAC1B,oBAAoB,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;qBAC1F;oBACD,IAAI,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE;wBACvC,oBAAoB,GAAG,cAAc,CAAC,oBAAoB,CAAC,CAAC;qBAC7D;oBACD,SAAS,GAAG,oBAAoB,CAAC;iBAClC;gBACD,OAAO,CAAC,SAAS,CAAC,CAAC;aACpB;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,CAAC;aACX;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,WAAW;QACb,IAAI,OAAO,GAAG,IAAI,KAAK,EAAoC,CAAC;QAC5D,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;YACzB,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,KAAK,UAAU,EAAE;gBAC/C,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACvC;iBAAM;gBACL,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;aACjC;SACF;QACD,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,EAAE;YACzD,MAAM,IAAI,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrD;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,IAAI,aAAa;QACf,IAAI,SAAS,GAAG,IAAI,KAAK,EAAY,CAAC;QACtC,MAAM,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;QACrD,IAAI,oBAAoB,EAAE;YACxB,IAAI,OAAO,oBAAoB,KAAK,UAAU,EAAE;gBAC9C,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,SAAS,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC;aACxC;iBAAM;gBACL,SAAS,GAAG,oBAAoB,CAAC;aAClC;SACF;QACD,OAAO;YACL;gBACE,OAAO,EAAE,YAAY,CAAC,IAAI,CAAC;gBAC3B,QAAQ,EAAE,IAAI,CAAC,MAAM;gBACrB,SAAS,EAAE,IAAI;aAChB;YACD;gBACE,OAAO,EAAE,YAAY;gBACrB,QAAQ,EAAE,IAAI,CAAC,MAAM;gBACrB,SAAS,EAAE,IAAI;aAChB;YACD,GAAG,SAAS;SACb,CAAC;IACJ,CAAC;IAED,IAAI,wBAAwB;QAC1B,IAAI,oBAAoB,GAAG,EAA8B,CAAC;QAC1D,MAAM,+BAA+B,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;QAC3E,IAAI,+BAA+B,EAAE;YACnC,IAAI,+BAA+B,YAAY,QAAQ,EAAE;gBACvD,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAC;aAClF;iBAAM;gBACL,oBAAoB,GAAG,+BAA+B,CAAC;aACxD;SACF;QACD,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED,IAAI,oBAAoB;QACtB,IAAI,gBAAgB,GAAqB,EAAE,CAAC;QAC5C,MAAM,2BAA2B,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QACnE,IAAI,2BAA2B,EAAE;YAC/B,IAAI,OAAO,2BAA2B,KAAK,UAAU,EAAE;gBACrD,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,2BAAiE,EAAE,IAAI,CAAC,CAAC;aAChH;iBAAM;gBACL,gBAAgB,GAAG,2BAA2B,CAAC;aAChD;SACF;QACD,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,IAAI,sBAAsB;QACxB,IAAI,kBAAkB,GAAwB,EAAE,CAAC;QACjD,MAAM,6BAA6B,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC;QACvE,IAAI,6BAA6B,EAAE;YACjC,IAAI,OAAO,6BAA6B,KAAK,UAAU,EAAE;gBACvD,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,6BAA6B,EAAE,IAAI,CAAC,CAAC;aAC9E;iBAAM;gBACL,kBAAkB,GAAG,6BAA6B,CAAC;aACpD;SACF;QACD,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAEO,iBAAiB,CAAC,QAAa;QACrC,OAAO,CACL,QAAQ,YAAY,iBAAiB;YACrC,CAAC,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAC5E,CAAC;IACJ,CAAC;IAEO,wCAAwC,CAAC,aAA4B;QAC3E,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE;YAChC,MAAM,aAAa,GAAG,aAAa,CAAC,IAAI,CAAQ,CAAC;YACjD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,EAAE;gBAC1C,KAAK,MAAM,IAAI,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;oBACtC,MAAM,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;wBAClC,IAAI,IAAI,KAAK,eAAe,IAAI,IAAI,KAAK,YAAY,IAAI,IAAI,KAAK,oBAAoB,EAAE;4BACtF,aAAa,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,IAAS,EAAE,UAAe,EAAE,IAAS,EAAE,EAAE;gCACpE,IAAI,UAAU,YAAY,OAAO,EAAE;oCACjC,UAAU,GAAG,MAAM,UAAU,CAAC;iCAC/B;qCAAM,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;oCAC5C,UAAU,GAAG,IAAI,CAAC;iCACnB;gCACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC;gCAChE,IAAI,aAAa,CAAC;gCAClB,IAAI;oCACF,aAAa,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;iCACxD;gCAAC,OAAO,CAAC,EAAE;oCACV,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;oCAC/B,IAAI,aAAa,IAAI,MAAM,EAAE;wCAC3B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;qCACvB;oCACD,MAAM,CAAC,CAAC;iCACT;gCACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC;gCAChD,IAAI,MAAM,CAAC;gCACX,IAAI;oCACF,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;iCACxE;gCAAC,OAAO,CAAC,EAAE;oCACV,MAAM,CAAC,CAAC;iCACT;gCACD,OAAO,MAAM,CAAC;4BAChB,CAAC,CAAC;yBACH;6BAAM;4BACL,aAAa,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,IAAS,EAAE,IAAS,EAAE,UAAe,EAAE,IAAS,EAAE,EAAE;gCAC/E,IAAI,UAAU,YAAY,OAAO,EAAE;oCACjC,UAAU,GAAG,MAAM,UAAU,CAAC;iCAC/B;qCAAM,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;oCAC5C,UAAU,GAAG,IAAI,CAAC;iCACnB;gCACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC;gCAChE,IAAI,aAAa,CAAC;gCAClB,IAAI;oCACF,aAAa,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;iCACxD;gCAAC,OAAO,CAAC,EAAE;oCACV,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;oCAC/B,IAAI,aAAa,IAAI,MAAM,EAAE;wCAC3B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;qCACvB;oCACD,MAAM,CAAC,CAAC;iCACT;gCACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC;gCAChD,IAAI,MAAM,CAAC;gCACX,IAAI;oCACF,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;iCACpF;gCAAC,OAAO,CAAC,EAAE;oCACV,aAAa,CAAC,QAAQ,CAAC,qBAAqB,CAAC;wCAC3C,IAAI,EAAE,SAAS;wCACf,IAAI,EAAE,CAAC,CAAC,CAAC;wCACT,WAAW,EAAE,IAAI;qCAClB,CAAC,CAAC;oCACH,MAAM,CAAC,CAAC;iCACT;gCACD,OAAO,MAAM,CAAC;4BAChB,CAAC,CAAC;yBACH;qBACF;yBAAM,IAAI,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,WAAW,CAAC,EAAE;wBAC5E,MAAM,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;wBACzC,aAAa,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,GAAG,KAAK,EAAE,IAAS,EAAE,IAAS,EAAE,UAAe,EAAE,IAAS,EAAE,EAAE;4BAC5F,IAAI,UAAU,YAAY,OAAO,EAAE;gCACjC,UAAU,GAAG,MAAM,UAAU,CAAC;6BAC/B;iCAAM,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gCAC5C,UAAU,GAAG,IAAI,CAAC;6BACnB;4BACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC;4BAChE,IAAI,aAAa,CAAC;4BAClB,IAAI;gCACF,aAAa,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;6BACxD;4BAAC,OAAO,CAAC,EAAE;gCACV,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;gCAC/B,IAAI,aAAa,IAAI,MAAM,EAAE;oCAC3B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;iCACvB;gCACD,MAAM,CAAC,CAAC;6BACT;4BACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC;4BAChD,IAAI,MAAM,CAAC;4BACX,IAAI;gCACF,MAAM,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;6BACtF;4BAAC,OAAO,CAAC,EAAE;gCACV,aAAa,CAAC,QAAQ,CAAC,qBAAqB,CAAC;oCAC3C,IAAI,EAAE,SAAS;oCACf,IAAI,EAAE,CAAC,CAAC,CAAC;oCACT,WAAW,EAAE,IAAI;iCAClB,CAAC,CAAC;gCACH,MAAM,CAAC,CAAC;6BACT;4BACD,OAAO,MAAM,CAAC;wBAChB,CAAC,CAAC;qBACH;iBACF;aACF;SACF;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,mDAAmD,CAAC,oBAAyB;QACnF,MAAM,6BAA6B,GAAG,CAAC,cAAqB,EAAE,EAAE;YAC9D,OAAO;gBACL,CAAC,IAAS,EAAE,EAAE,CAAC,KAAK,EAAE,IAAS,EAAE,IAAS,EAAE,UAAe,EAAE,IAAS,EAAE,EAAE;oBACxE,IAAI,UAAU,YAAY,OAAO,EAAE;wBACjC,UAAU,GAAG,MAAM,UAAU,CAAC;qBAC/B;yBAAM,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;wBAC5C,UAAU,GAAG,IAAI,CAAC;qBACnB;oBACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC;oBAChE,IAAI,aAAa,CAAC;oBAClB,IAAI;wBACF,aAAa,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;qBACxD;oBAAC,OAAO,CAAC,EAAE;wBACV,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;wBAC/B,IAAI,aAAa,IAAI,MAAM,EAAE;4BAC3B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;yBACvB;wBACD,MAAM,CAAC,CAAC;qBACT;oBACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC;oBAChD,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;gBAC/C,CAAC;gBACD,GAAG,cAAc;aAClB,CAAC;QACJ,CAAC,CAAC;QACF,KAAK,MAAM,IAAI,IAAI,oBAAoB,EAAE;YACvC,IAAI,oBAAoB,CAAC,IAAI,CAAC,YAAY,QAAQ,IAAI,oBAAoB,CAAC,IAAI,CAAC,YAAY,KAAK,EAAE;gBACjG,MAAM,cAAc,GAAG,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3D,oBAAoB,CAAC,IAAI,CAAC,GAAG,6BAA6B,CAAC,cAAc,CAAC,CAAC;aAC5E;iBAAM;gBACL,KAAK,MAAM,OAAO,IAAI,oBAAoB,CAAC,IAAI,CAAC,EAAE;oBAChD,MAAM,cAAc,GAAG,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACpE,oBAAoB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,6BAA6B,CAAC,cAAc,CAAC,CAAC;iBACrF;aACF;SACF;QACD,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAID,IAAI,UAAU;QACZ,IAAI,MAAM,GAAW,aAAa,CAAC,aAAa,CAAC;QACjD,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,WAAW,EAAE;YACjD,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC9C,IAAI,gBAAgB,EAAE;gBACpB,IAAI,gBAAgB,YAAY,QAAQ,EAAE;oBACxC,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgC,EAAE,IAAI,CAAC,CAAC;iBACrF;qBAAM;oBACL,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,gBAA0B,CAAC;iBACrD;gBACD,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;aACjC;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;aAC/B;SACF;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,EAAE;YAC1C,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;SACjC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAID,IAAI,SAAS;QACX,IAAI,KAAK,GAAkB,aAAa,CAAC,YAAY,CAAC;QACtD,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,KAAK,WAAW,EAAE;YACxD,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAC5C,IAAI,eAAe,EAAE;gBACnB,IAAI,eAAe,YAAY,QAAQ,EAAE;oBACvC,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,IAAI,CAAC,MAAM,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAsC,EAAE,IAAI,CAAC,CAAC;iBAClG;qBAAM;oBACL,IAAI,CAAC,MAAM,CAAC,iBAAiB,GAAG,eAAgC,CAAC;iBAClE;gBACD,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;aACvC;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,iBAAiB,GAAG,IAAI,CAAC;aACtC;SACF;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,KAAK,IAAI,EAAE;YACjD,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;SACvC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,6BAA6B;QAC/B,IAAI,yBAAyB,GAA+B,EAAE,CAAC;QAC/D,MAAM,oCAAoC,GAAG,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC;QACrF,IAAI,oCAAoC,EAAE;YACxC,IAAI,oCAAoC,YAAY,QAAQ,EAAE;gBAC5D,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,yBAAyB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC5C,oCAAwE,EACxE,IAAI,CACL,CAAC;aACH;iBAAM;gBACL,yBAAyB,GAAG,oCAAkE,CAAC;aAChG;SACF;QACD,OAAO,yBAAyB,CAAC;IACnC,CAAC;IAID;;;;;;;;;;;;OAYG;IACH,IAAI,OAAO;QAKT,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;YAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,CAAC,OAAO,EAAE,cAAc,GAAG,KAAK,EAAE,eAAe,GAAG,KAAK,EAAE,EAAE;gBACxF,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;gBACpC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;oBAC1C,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAC1B,OAAO,EACP,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;wBACpC,IAAI;4BACF,MAAM,cAAc,GAAsB;gCACxC,QAAQ,EAAE,SAAS;6BACpB,CAAC;4BACF,IAAI,WAAW,CAAC,MAAM,EAAE;gCACtB,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CACvC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAC/D,CAAC;gCACF,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,GAAG,eAAe,CAAC,CAAC;6BACnD;4BACD,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;4BAC/D,MAAM,eAAe,GAAG,MAAM,iBAAiB,CAAC,aAAa,CAAC;4BAC9D,IAAI,aAAa,CAAC;4BAClB,MAAM,wBAAwB,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;4BACvD,IAAI,wBAAwB,EAAE;gCAC5B,IAAI,wBAAwB,YAAY,QAAQ,EAAE;oCAChD,cAAc,CAAC,QAAQ,GAAG,eAAe,CAAC;oCAC1C,aAAa,GAAG,MAAM,wBAAwB,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,CAAC,CAAC;iCAC5F;qCAAM;oCACL,aAAa,GAAG,MAAM,wBAAwB,CAAC;iCAChD;6BACF;4BACD,iBAAiB,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAe,cAAc,EAAE,aAAa,CAAC,CAAC;4BACvF,MAAM,GAAG,GAAmB,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;4BACtD,IAAI,GAAG,IAAI,MAAM,IAAI,GAAG,EAAE;gCACxB,IAAI,CAAC,CAAC,sBAAsB,IAAI,GAAG,CAAC,EAAE;oCACpC,GAAG,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC;oCAEjC,SAAS,iBAAiB;wCACxB,MAAM,mBAAmB,GAAG,GAAG,CAAC,sBAAsB,CAAC,CAAC;wCAExD,IAAI,mBAAmB,EAAE;4CACvB,KAAK,MAAM,kBAAkB,IAAI,mBAAmB,EAAE;gDACpD,kBAAkB,EAAE,CAAC;6CACtB;4CACD,OAAO,GAAG,CAAC,sBAAsB,CAAC,CAAC;yCACpC;oCACH,CAAC;oCAED,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;oCACrC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;iCACvC;gCACD,GAAG,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;oCACpC,eAAe,CAAC,gBAAgB,CAAC;wCAC/B,IAAI,EAAE,YAAY;wCAClB,IAAI,EAAE,CAAC,iBAAiB,CAAC;wCACzB,WAAW,EAAE,IAAI;wCACjB,KAAK,EAAE,KAAK;qCACb,CAAC,CAAC;oCACH,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;gCACnC,CAAC,CAAC,CAAC;6BACJ;4BACD,eAAe,CAAC,iBAAiB,GAAG,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;gCACnD,IACE,OAAO,QAAQ,KAAK,QAAQ;oCAC5B,OAAO,QAAQ,KAAK,SAAS;oCAC7B,OAAO,QAAQ,KAAK,QAAQ;oCAC5B,YAAY,IAAI,QAAQ;oCACxB,OAAO,QAAQ,CAAC,YAAY,CAAC,KAAK,UAAU,EAC5C;oCACA,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAAC;iCACvF;4BACH,CAAC,CAAC;4BACF,MAAM,eAAe,CAAC,gBAAgB,CAAC;gCACrC,IAAI,EAAE,WAAW;gCACjB,IAAI,EAAE,CAAC,iBAAiB,CAAC;gCACzB,WAAW,EAAE,IAAI;gCACjB,KAAK,EAAE,IAAI;6BACZ,CAAC,CAAC;4BACH,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;yBACpC;wBAAC,OAAO,CAAC,EAAE;4BACV,MAAM,CAAC,CAAC,CAAC,CAAC;yBACX;oBACH,CAAC,CAAC,CACH,CAAC;iBACH;gBACD,IAAI,eAAe,IAAI,cAAc,EAAE;oBACrC,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBAC9C;gBACD,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;oBAChE,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;oBACtD,IAAI,CAAC,eAAe,EAAE;wBACpB,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;qBACnE;oBACD,IAAI,CAAC,cAAc,EAAE;wBACnB,YAAY,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;qBACnC;oBACD,OAAO,YAAY,CAAC;gBACtB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;SACH;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;IACpC,CAAC;IAEO,kBAAkB,CAAC,OAAgB;QACzC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;;AA5LM,2BAAa,GAAW,OAAO,CAAC;AAuBhC,0BAAY,GAAkB,IAAI,gBAAgB,EAAE,CAAC","sourcesContent":["import { IDirectiveResolvers, IResolverValidationOptions } from '@kamilkisiela/graphql-tools';\nimport {\n  mergeResolvers,\n  ResolversComposerMapping,\n  composeResolvers,\n  mergeSchemas,\n  mergeSchemasAsync,\n  getSchemaDirectiveFromDirectiveResolver,\n  mergeTypeDefs,\n  printSchemaWithDirectives\n} from 'graphql-toolkit';\nimport { Provider, Injector, ProviderScope } from '@graphql-modules/di';\nimport { DocumentNode, GraphQLSchema, parse, GraphQLScalarType } from 'graphql';\nimport {\n  SchemaNotValidError,\n  DependencyModuleUndefinedError,\n  TypeDefNotFoundError,\n  ModuleConfigRequiredError\n} from './errors';\nimport * as deepmerge from 'deepmerge';\nimport { ModuleSessionInfo } from './module-session-info';\nimport { ModuleContext, SubscriptionHooks, Resolvers } from './types';\nimport { asArray, normalizeSession } from './helpers';\nimport { KeyValueCache, InMemoryLRUCache } from 'apollo-server-caching';\nimport { ServerResponse } from 'http';\n\ntype MaybePromise<T> = Promise<T> | T;\n\nexport type LogMethod = (message: string | Error) => void;\n\nexport interface Logger {\n  log?: LogMethod;\n  error?: LogMethod;\n  clientError?: LogMethod;\n  warn?: LogMethod;\n}\n\n/**\n * A context builder method signature for `contextBuilder`.\n */\nexport type BuildContextFn<Config, Session extends object, Context, PreviousContext = any> = (\n  session: Session,\n  currentContext: ModuleContext<PreviousContext>,\n  moduleSessionInfo: ModuleSessionInfo<Config, Session, Context>\n) => Promise<Context> | Context;\n\nexport interface SchemaDirectives {\n  [name: string]: any;\n}\n\nexport type GraphQLModuleOption<Option, Config, Session extends object, Context> =\n  | Option\n  | ((module: GraphQLModule<Config, Session, Context>, ...args: any[]) => Option);\n\nexport type GraphQLModuleOptionAsync<Option, Config, Session extends object, Context> =\n  | GraphQLModuleOption<Option, Config, Session, Context>\n  | Promise<Option>\n  | ((module: GraphQLModule<Config, Session, Context>, ...args: any[]) => Promise<Option>);\n\n/**\n * Defined the structure of GraphQL module options object.\n */\nexport interface GraphQLModuleOptions<\n  Config,\n  Session extends object,\n  Context,\n  SelfResolvers extends Resolvers<any, ModuleContext<Context>>\n> {\n  /**\n   * The name of the module. Use it later to get your `ModuleConfig(name)` or to declare\n   * a dependency to this module (in another module)\n   */\n  name?: string;\n  /**\n   * A definition of GraphQL type definitions, as string or `DocumentNode`.\n   * Arrays are also accepted, and they will get merged.\n   * You can also pass a function that will get the module's config as argument, and should return\n   * the type definitions.\n   */\n  typeDefs?: GraphQLModuleOption<\n    MaybePromise<string | DocumentNode | GraphQLSchema | Array<string | DocumentNode | GraphQLSchema>>,\n    Config,\n    Session,\n    Context\n  >;\n  /**\n   * Resolvers object, or a function will get the module's config as argument, and should\n   * return the resolvers object.\n   */\n  resolvers?: GraphQLModuleOption<MaybePromise<SelfResolvers | Array<SelfResolvers>>, Config, Session, Context>;\n  /**\n   * Context builder method. Use this to add your own fields and data to the GraphQL `context`\n   * of each execution of GraphQL.\n   */\n  context?: BuildContextFn<Config, Session, Context> | Promise<Context> | Context;\n  /**\n   * The dependencies that this module need to run correctly, you can either provide the `GraphQLModule`,\n   * or provide a string with the name of the other module.\n   * Adding a dependency will effect the order of the type definition building, resolvers building and context\n   * building.\n   */\n  imports?: GraphQLModuleOption<Array<GraphQLModule<any, Session, any>>, Config, Session, Context>;\n  /**\n   * A list of `Providers` to load into the GraphQL module.\n   * It could be either a `class` or a value/class instance.\n   * All loaded class will be loaded as Singletons, and the instance will be\n   * shared across all GraphQL executions.\n   */\n  providers?: GraphQLModuleOption<Provider[], Config, Session, Context>;\n  /** Object map between `Type.field` to a function(s) that will wrap the resolver of the field  */\n  resolversComposition?: GraphQLModuleOption<ResolversComposerMapping, Config, Session, Context>;\n  schemaDirectives?: GraphQLModuleOption<SchemaDirectives, Config, Session, Context>;\n  directiveResolvers?: GraphQLModuleOption<IDirectiveResolvers, Config, Session, Context>;\n  logger?: GraphQLModuleOption<Logger, Config, Session, Context>;\n  extraSchemas?: GraphQLModuleOption<GraphQLSchema[], Config, Session, Context>;\n  middleware?: (\n    module: GraphQLModule<Config, Session, Context>,\n    ...args: any[]\n  ) => Partial<ModuleCache<Session, Context>> | void;\n  cache?: GraphQLModuleOption<KeyValueCache, Config, Session, Context>;\n  configRequired?: boolean;\n  resolverValidationOptions?: GraphQLModuleOption<IResolverValidationOptions, Config, Session, Context>;\n  defaultProviderScope?: GraphQLModuleOption<ProviderScope, Config, Session, Context>;\n  subscriptionHooks?: SubscriptionHooks;\n}\n\n/**\n * Returns a dependency injection token for getting a module's configuration object by\n * the module's name.\n * You can use this later with `@Inject` in your `Provider`s.\n *\n * @param module\n * @constructor\n */\nexport const ModuleConfig = (module: string | GraphQLModule | ((module?: void) => GraphQLModule | string)) => {\n  if (module instanceof Function) {\n    module = module();\n  }\n  if (module instanceof GraphQLModule) {\n    module = module.name;\n  }\n  return Symbol.for(`ModuleConfig.${module}`);\n};\n\nexport interface ModuleCache<Session extends object, Context> {\n  injector: Injector<Session>;\n  schema: GraphQLSchema;\n  typeDefs: DocumentNode;\n  resolvers: any;\n  schemaDirectives: SchemaDirectives;\n  contextBuilder: (session: Session, excludeSession?: boolean) => Promise<ModuleContext<Context>>;\n  extraSchemas: GraphQLSchema[];\n  directiveResolvers: IDirectiveResolvers;\n  subscriptionHooks: SubscriptionHooks;\n  imports: GraphQLModule[];\n  selfKeyValueCache: KeyValueCache;\n  selfLogger: Logger;\n}\n\nexport interface ModuleCacheAsync<Session extends object> {\n  schemaAsync: Promise<GraphQLSchema>;\n  typeDefsAsync: Promise<DocumentNode>;\n  resolversAsync: Promise<any>;\n  injectorAsync: Promise<Injector<Session>>;\n}\n\n/**\n * Represents a GraphQL module that has it's own types, resolvers, context and business logic.\n * You can read more about it in the Documentation section. {@link /docs/introduction/modules}\n *\n * You can also specific `Config` generic to tell TypeScript what's the structure of your\n * configuration object to use later with `forRoot`\n */\nexport class GraphQLModule<\n  Config = any,\n  Session extends object = any,\n  Context = any,\n  SelfResolvers extends Resolvers<any, ModuleContext<Context>> = Resolvers<any, ModuleContext<Context>>\n> {\n  private _cache: ModuleCache<Session, Context> = {\n    injector: undefined,\n    schema: undefined,\n    typeDefs: undefined,\n    resolvers: undefined,\n    schemaDirectives: undefined,\n    contextBuilder: undefined,\n    extraSchemas: undefined,\n    directiveResolvers: undefined,\n    subscriptionHooks: undefined,\n    imports: undefined,\n    selfKeyValueCache: undefined,\n    selfLogger: undefined\n  };\n\n  private _cacheAsync: ModuleCacheAsync<Session> = {\n    schemaAsync: undefined,\n    typeDefsAsync: undefined,\n    resolversAsync: undefined,\n    injectorAsync: undefined\n  };\n\n  private _exclusionsFromSchema = new Array<string>();\n\n  /**\n   * Creates a new `GraphQLModule` instance, merged it's type definitions and resolvers.\n   * @param options - module configuration\n   */\n  constructor(\n    private _options: GraphQLModuleOptions<Config, Session, Context, SelfResolvers> = {},\n    private _moduleConfig?: Config\n  ) {}\n\n  /**\n   * Creates another instance of the module using a configuration\n   * @param config - the config object\n   */\n  forRoot(config: Config): GraphQLModule<Config, Session, Context, SelfResolvers> {\n    this._moduleConfig = {\n      ...this._moduleConfig,\n      ...config\n    };\n    // clean cache\n    this._cache = {\n      injector: undefined,\n      schema: undefined,\n      typeDefs: undefined,\n      resolvers: undefined,\n      schemaDirectives: undefined,\n      contextBuilder: undefined,\n      extraSchemas: undefined,\n      directiveResolvers: undefined,\n      subscriptionHooks: undefined,\n      imports: undefined,\n      selfKeyValueCache: undefined,\n      selfLogger: undefined\n    };\n    return this;\n  }\n\n  forChild(config: Config): GraphQLModule<Config, Session, Context, SelfResolvers> {\n    if (config) {\n      return new GraphQLModule<Config, Session, Context, SelfResolvers>(this._options, {\n        ...this._moduleConfig,\n        ...config\n      });\n    } else {\n      return this;\n    }\n  }\n\n  withExclusionsFromSchema(exclusionsFromSchema: string[]): GraphQLModule<Config, Session, Context, SelfResolvers> {\n    const newModule = new GraphQLModule<Config, Session, Context, SelfResolvers>(this._options, this._moduleConfig);\n    newModule._exclusionsFromSchema = exclusionsFromSchema;\n    return newModule;\n  }\n\n  clearCache() {\n    this._cache = {\n      injector: undefined,\n      schema: undefined,\n      typeDefs: undefined,\n      resolvers: undefined,\n      schemaDirectives: undefined,\n      contextBuilder: undefined,\n      extraSchemas: undefined,\n      directiveResolvers: undefined,\n      subscriptionHooks: undefined,\n      imports: undefined,\n      selfKeyValueCache: undefined,\n      selfLogger: undefined\n    };\n  }\n\n  mock(partialCache?: Partial<ModuleCache<Session, Context>>) {\n    if (partialCache.contextBuilder) {\n      const providedContextBuilder = partialCache.contextBuilder;\n      partialCache.contextBuilder = async (session: Session, excludeSession?: boolean) => {\n        session = normalizeSession(session);\n        const moduleSessionInfo = new ModuleSessionInfo(this, session);\n        const sessionInjector = moduleSessionInfo.injector;\n        sessionInjector.onInstanceCreated = ({ instance }) => {\n          if (\n            typeof instance !== 'number' &&\n            typeof instance !== 'boolean' &&\n            typeof instance !== 'string' &&\n            'initialize' in instance &&\n            typeof instance['initialize'] === 'function'\n          ) {\n            instance['initialize']({ cache: this.selfCache, context: moduleSessionInfo.context });\n          }\n        };\n        await sessionInjector.callHookWithArgs({\n          hook: 'onRequest',\n          args: [moduleSessionInfo],\n          instantiate: true,\n          async: true\n        });\n        return {\n          injector: sessionInjector,\n          ...providedContextBuilder(session, excludeSession)\n        };\n      };\n    }\n    this._cache = {\n      ...this._cache,\n      ...partialCache\n    };\n    return this;\n  }\n\n  resetMock() {\n    this.clearCache();\n    return this;\n  }\n\n  private checkConfiguration() {\n    if (this._options.configRequired && !this._moduleConfig) {\n      throw new ModuleConfigRequiredError(this.name);\n    }\n  }\n\n  get name() {\n    if (!this._options.name) {\n      const getFilename = (id: string) => id.split('/').pop();\n      const generateName = () => {\n        const randomId = Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER)).toString();\n        if (typeof module !== 'undefined' && module.parent && module.parent.parent) {\n          return getFilename(module.parent.parent.id) + '_' + randomId;\n        }\n        return randomId;\n      };\n      this._options.name = generateName();\n    }\n    return this._options.name;\n  }\n\n  get config() {\n    return this._moduleConfig;\n  }\n\n  /**\n   * Gets the application `GraphQLSchema` object.\n   * If the schema object is not built yet, it compiles\n   * the `typeDefs` and `resolvers` into `GraphQLSchema`\n   */\n  get schema() {\n    if (typeof this._cache.schema === 'undefined') {\n      this.checkConfiguration();\n      const selfImports = this.selfImports;\n      const importsSchemas = selfImports.map(module => module.schema).filter(schema => schema);\n      try {\n        const selfTypeDefs = this.selfTypeDefs;\n        const selfEncapsulatedResolvers = this.addSessionInjectorToSelfResolversContext(this.selfResolvers);\n        const selfEncapsulatedResolversComposition = this.addSessionInjectorToSelfResolversCompositionContext(\n          this.selfResolversComposition\n        );\n        const selfResolverValidationOptions = this.selfResolverValidationOptions;\n        const selfExtraSchemas = this.selfExtraSchemas;\n        if (importsSchemas.length || selfTypeDefs || selfExtraSchemas.length) {\n          this._cache.schema = mergeSchemas({\n            schemas: [...importsSchemas, ...selfExtraSchemas],\n            typeDefs: selfTypeDefs || undefined,\n            resolvers: selfEncapsulatedResolvers,\n            resolversComposition: selfEncapsulatedResolversComposition,\n            resolverValidationOptions: selfResolverValidationOptions,\n            logger:\n              'clientError' in this.selfLogger\n                ? {\n                    log: message => this.selfLogger.clientError(message)\n                  }\n                : undefined,\n            exclusions: this._exclusionsFromSchema\n          });\n        } else {\n          this._cache.schema = null;\n        }\n      } catch (e) {\n        if (e.message === 'Must provide typeDefs') {\n          this._cache.schema = null;\n        } else if (e.message.includes(`Type \"`) && e.message.includes(`\" not found in document.`)) {\n          const typeDef = e.message.replace('Type \"', '').replace('\" not found in document.', '');\n          throw new TypeDefNotFoundError(typeDef, this.name);\n        } else {\n          throw new SchemaNotValidError(this.name, e.message);\n        }\n      }\n      if ('middleware' in this._options) {\n        const middlewareResult = this.injector.call(this._options.middleware, this);\n        Object.assign(this._cache, middlewareResult);\n      }\n    }\n    return this._cache.schema;\n  }\n\n  get schemaAsync(): Promise<GraphQLSchema> {\n    if (typeof this._cache.schema === 'undefined') {\n      if (typeof this._cacheAsync.schemaAsync === 'undefined') {\n        this._cacheAsync.schemaAsync = new Promise(async (resolve, reject) => {\n          try {\n            if (!this._cache.schema) {\n              this.checkConfiguration();\n              try {\n                const selfTypeDefsAsync$ = this.selfTypeDefsAsync;\n                const selfEncapsulatedResolversAsync$ = this.selfResolversAsync.then(selfResolvers =>\n                  this.addSessionInjectorToSelfResolversContext(selfResolvers)\n                );\n                const [selfTypeDefs, selfEncapsulatedResolvers, selfExtraSchemas, importsSchemas] = await Promise.all([\n                  selfTypeDefsAsync$,\n                  selfEncapsulatedResolversAsync$,\n                  Promise.resolve().then(() => this.selfExtraSchemas),\n                  Promise.resolve().then(() => Promise.all(this.selfImports.map(module => module.schemaAsync)))\n                ]);\n                const selfEncapsulatedResolversComposition = this.addSessionInjectorToSelfResolversCompositionContext(\n                  this.selfResolversComposition\n                );\n                const selfLogger = this.selfLogger;\n                const selfResolverValidationOptions = this.selfResolverValidationOptions;\n                if (importsSchemas.length || selfTypeDefs || selfExtraSchemas.length) {\n                  this._cache.schema = await mergeSchemasAsync({\n                    schemas: [...importsSchemas, ...selfExtraSchemas].filter(s => s),\n                    typeDefs: selfTypeDefs || undefined,\n                    resolvers: selfEncapsulatedResolvers,\n                    resolversComposition: selfEncapsulatedResolversComposition,\n                    resolverValidationOptions: selfResolverValidationOptions,\n                    logger:\n                      'clientError' in selfLogger\n                        ? {\n                            log: (message: string | Error) => selfLogger.clientError(message)\n                          }\n                        : undefined,\n                    exclusions: this._exclusionsFromSchema\n                  });\n                } else {\n                  this._cache.schema = null;\n                }\n              } catch (e) {\n                if (e.message === 'Must provide typeDefs') {\n                  this._cache.schema = null;\n                } else if (e.message.includes(`Type \"`) && e.message.includes(`\" not found in document.`)) {\n                  const typeDef = e.message.replace('Type \"', '').replace('\" not found in document.', '');\n                  throw new TypeDefNotFoundError(typeDef, this.name);\n                } else {\n                  throw new SchemaNotValidError(this.name, e.message);\n                }\n              }\n              if ('middleware' in this._options) {\n                const middlewareResult = this.injector.call(this._options.middleware, this);\n                Object.assign(this._cache, middlewareResult);\n              }\n            }\n            resolve(this._cache.schema);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n      return this._cacheAsync.schemaAsync;\n    }\n    return Promise.resolve(this._cache.schema);\n  }\n\n  /**\n   * Gets the application dependency-injection injector\n   */\n  get injector(): Injector<Session> {\n    if (typeof this._cache.injector === 'undefined') {\n      this.checkConfiguration();\n      const injector = (this._cache.injector = new Injector<Session>({\n        name: this.name,\n        injectorScope: ProviderScope.Application,\n        defaultProviderScope: this.selfDefaultProviderScope,\n        hooks: [\n          'onInit',\n          'onRequest',\n          'onResponse',\n          'onError',\n          'onConnect',\n          'onOperation',\n          'onOperationComplete',\n          'onDisconnect'\n        ],\n        initialProviders: this.selfProviders,\n        children: this.selfImports.map(module => module.injector)\n      }));\n      injector.onInstanceCreated = ({ instance }) => {\n        if (\n          typeof instance !== 'number' &&\n          typeof instance !== 'boolean' &&\n          typeof instance !== 'string' &&\n          'initialize' in instance &&\n          typeof instance['initialize'] === 'function'\n        ) {\n          instance['initialize']({ cache: this.selfCache });\n        }\n      };\n      injector.callHookWithArgs({\n        hook: 'onInit',\n        args: [this],\n        instantiate: true,\n        async: false\n      });\n    }\n    return this._cache.injector;\n  }\n\n  get injectorAsync(): Promise<Injector<Session>> {\n    if (typeof this._cache.injector === 'undefined') {\n      if (typeof this._cacheAsync.injectorAsync === 'undefined') {\n        this._cacheAsync.injectorAsync = new Promise(async (resolve, reject) => {\n          try {\n            this.checkConfiguration();\n            const [initialProviders, children] = await Promise.all([\n              Promise.resolve().then(() => this.selfProviders),\n              Promise.resolve().then(() => Promise.all(this.selfImports.map(module => module.injectorAsync)))\n            ]);\n            const injector = (this._cache.injector = new Injector<Session>({\n              name: this.name,\n              injectorScope: ProviderScope.Application,\n              defaultProviderScope: this.selfDefaultProviderScope,\n              hooks: [\n                'onInit',\n                'onRequest',\n                'onResponse',\n                'onError',\n                'onConnect',\n                'onOperation',\n                'onOperationComplete',\n                'onDisconnect'\n              ],\n              initialProviders,\n              children\n            }));\n            injector.onInstanceCreated = ({ instance }) => {\n              if (\n                typeof instance !== 'number' &&\n                typeof instance !== 'boolean' &&\n                typeof instance !== 'string' &&\n                'initialize' in instance &&\n                typeof instance['initialize'] === 'function'\n              ) {\n                instance['initialize']({ cache: this.selfCache });\n              }\n            };\n            await injector.callHookWithArgs({\n              hook: 'onInit',\n              args: [this],\n              instantiate: true,\n              async: true\n            });\n            resolve(this._cache.injector);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n      return this._cacheAsync.injectorAsync;\n    }\n    return Promise.resolve(this._cache.injector);\n  }\n\n  get extraSchemas(): GraphQLSchema[] {\n    if (typeof this._cache.extraSchemas) {\n      const selfImports = this.selfImports;\n      const importsExtraSchemas = selfImports\n        .map(module => module.extraSchemas)\n        .reduce((extraSchemas, moduleExtraSchemas) => extraSchemas.concat(moduleExtraSchemas), []);\n      const selfExtraSchemas = this.selfExtraSchemas;\n      this._cache.extraSchemas = importsExtraSchemas.concat(selfExtraSchemas);\n    }\n    return this._cache.extraSchemas;\n  }\n\n  /**\n   * Gets the merged GraphQL type definitions as one string\n   */\n  get typeDefs(): DocumentNode {\n    if (typeof this._cache.typeDefs === 'undefined') {\n      let typeDefsArr = new Array<GraphQLSchema | DocumentNode>();\n      const selfImports = this.selfImports;\n      for (const module of selfImports) {\n        const moduleTypeDefs = module.typeDefs;\n        if (moduleTypeDefs) {\n          typeDefsArr.push(moduleTypeDefs);\n        }\n      }\n      const selfTypeDefs = this.selfTypeDefs;\n      if (selfTypeDefs) {\n        typeDefsArr.push(selfTypeDefs);\n      }\n      typeDefsArr = typeDefsArr.concat(this.extraSchemas);\n      if (typeDefsArr.length) {\n        this._cache.typeDefs = mergeTypeDefs(typeDefsArr, {\n          exclusions: this._exclusionsFromSchema,\n          useSchemaDefinition: false\n        });\n      } else {\n        this._cache.typeDefs = null;\n      }\n    }\n    return this._cache.typeDefs;\n  }\n\n  get typeDefsAsync(): Promise<DocumentNode> {\n    if (typeof this._cache.typeDefs === 'undefined') {\n      if (typeof this._cacheAsync.typeDefsAsync) {\n        this._cacheAsync.typeDefsAsync = new Promise(async (resolve, reject) => {\n          try {\n            const [extraSchemas, importsTypeDefs, selfTypeDefs] = await Promise.all([\n              Promise.resolve().then(() => this.selfExtraSchemas),\n              Promise.all(this.selfImports.map<any>(module => module.typeDefsAsync)),\n              this.selfTypeDefsAsync\n            ]);\n            const typeDefs = importsTypeDefs.concat(extraSchemas).concat(selfTypeDefs);\n            if (typeDefs.length) {\n              this._cache.typeDefs = mergeTypeDefs(typeDefs.filter(s => s), {\n                exclusions: this._exclusionsFromSchema,\n                useSchemaDefinition: false\n              });\n            } else {\n              this._cache.typeDefs = null;\n            }\n            resolve(this._cache.typeDefs);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n      return this._cacheAsync.typeDefsAsync;\n    }\n    return Promise.resolve(this._cache.typeDefs);\n  }\n\n  get resolvers(): any {\n    if (typeof this._cache.resolvers === 'undefined') {\n      const resolversToBeComposed = new Array<Resolvers>();\n      const selfImports = this.selfImports;\n      for (const module of selfImports) {\n        const moduleResolvers = module.resolvers;\n        resolversToBeComposed.push(moduleResolvers);\n      }\n      const resolvers = this.addSessionInjectorToSelfResolversContext(this.selfResolvers);\n      const resolversComposition = this.addSessionInjectorToSelfResolversCompositionContext(\n        this.selfResolversComposition\n      );\n      resolversToBeComposed.push(resolvers);\n      const composedResolvers = composeResolvers(\n        mergeResolvers(resolversToBeComposed, {\n          exclusions: this._exclusionsFromSchema\n        }),\n        resolversComposition\n      );\n      this._cache.resolvers = composedResolvers;\n    }\n    return this._cache.resolvers;\n  }\n\n  get resolversAsync(): Promise<any> {\n    if (typeof this._cache.resolvers === 'undefined') {\n      if (typeof this._cacheAsync.resolversAsync === 'undefined') {\n        this._cacheAsync.resolversAsync = new Promise(async (resolve, reject) => {\n          try {\n            const resolversToBeComposed = await Promise.all([\n              ...this.selfImports.map<any>(module => module.resolversAsync),\n              this.selfResolversAsync.then(selfResolvers =>\n                this.addSessionInjectorToSelfResolversContext(selfResolvers)\n              )\n            ]);\n            const resolversComposition = this.addSessionInjectorToSelfResolversCompositionContext(\n              this.selfResolversComposition\n            );\n            const composedResolvers = composeResolvers(\n              mergeResolvers(resolversToBeComposed, {\n                exclusions: this._exclusionsFromSchema\n              }),\n              resolversComposition\n            );\n            this._cache.resolvers = composedResolvers;\n            resolve(this._cache.resolvers);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n      return this._cacheAsync.resolversAsync;\n    }\n    return Promise.resolve(this._cache.resolvers);\n  }\n\n  get schemaDirectives(): SchemaDirectives {\n    if (typeof this._cache.schemaDirectives === 'undefined') {\n      const schemaDirectivesSet = new Array<SchemaDirectives>();\n      const selfImports = this.selfImports;\n      for (const module of selfImports) {\n        const moduleSchemaDirectives = module.schemaDirectives;\n        schemaDirectivesSet.push(moduleSchemaDirectives);\n      }\n      const selfSchemaDirectives = this.selfSchemaDirectives;\n      const selfDirectiveResolvers = this.selfDirectiveResolvers;\n      for (const directiveName in selfDirectiveResolvers) {\n        selfSchemaDirectives[directiveName] = getSchemaDirectiveFromDirectiveResolver(\n          selfDirectiveResolvers[directiveName]\n        );\n      }\n      schemaDirectivesSet.push(selfSchemaDirectives);\n      this._cache.schemaDirectives = deepmerge.all([...schemaDirectivesSet]) as SchemaDirectives;\n    }\n    return this._cache.schemaDirectives;\n  }\n\n  private paramsOnOperationResult$Map = new WeakMap<any, Promise<any>>();\n  private opIdOnOperationCompleteResult$Map = new WeakMap<any, Promise<any>>();\n  get subscriptions(): SubscriptionHooks {\n    if (typeof this._cache.subscriptionHooks === 'undefined') {\n      const subscriptionHooks = new Array<SubscriptionHooks>();\n      const selfImports = this.selfImports;\n      for (const module of selfImports) {\n        const moduleSubscriptionHooks = module.subscriptions;\n        if (moduleSubscriptionHooks) {\n          subscriptionHooks.push(moduleSubscriptionHooks);\n        }\n      }\n      this._cache.subscriptionHooks = {\n        onConnect: (connectionParams, websocket, connectionContext) => {\n          if (!this._sessionContext$Map.has(websocket)) {\n            this._sessionContext$Map.set(\n              websocket,\n              new Promise(async (resolve, reject) => {\n                try {\n                  const importsOnConnectHooks$ = subscriptionHooks.map(\n                    async ({ onConnect }) => onConnect && onConnect(connectionParams, websocket, connectionContext)\n                  );\n                  const importsOnConnectHooks = await Promise.all(importsOnConnectHooks$);\n                  const importsResult = importsOnConnectHooks.reduce((acc, curr) => ({ ...acc, ...(curr || {}) }), {});\n                  const connectionModuleContext = await this.context(connectionContext);\n                  const sessionInjector = connectionModuleContext.injector;\n                  const hookResult = Object.assign(\n                    {},\n                    ...(await Promise.all([\n                      sessionInjector.callHookWithArgs({\n                        hook: 'onConnect',\n                        args: [connectionParams, websocket, connectionContext],\n                        instantiate: true,\n                        async: true\n                      }),\n                      this._options.subscriptionHooks &&\n                        this._options.subscriptionHooks.onConnect &&\n                        this._options.subscriptionHooks.onConnect(connectionParams, websocket, connectionContext)\n                    ]))\n                  );\n                  resolve({\n                    ...importsResult,\n                    ...connectionModuleContext,\n                    ...hookResult\n                  });\n                } catch (e) {\n                  reject(e);\n                }\n              })\n            );\n          }\n          return this._sessionContext$Map.get(websocket);\n        },\n        onOperation: (message, params, websocket) => {\n          if (!this.paramsOnOperationResult$Map.has(params)) {\n            this.paramsOnOperationResult$Map.set(\n              params,\n              new Promise(async (resolve, reject) => {\n                try {\n                  const importsOnOperationHooks$ = subscriptionHooks.map(\n                    async ({ onOperation }) => onOperation && onOperation(message, params, websocket)\n                  );\n                  const importsOnOperationHooks = await Promise.all(importsOnOperationHooks$);\n                  const importsResult = importsOnOperationHooks.reduce(\n                    (acc, curr) => ({ ...acc, ...(curr || {}) }),\n                    {}\n                  );\n                  const connectionModuleContext = await this.context(params.context);\n                  const sessionInjector = connectionModuleContext.injector;\n                  const moduleOnOperationResult = Object.assign(\n                    {},\n                    ...(await Promise.all([\n                      sessionInjector.callHookWithArgs({\n                        hook: 'onOperation',\n                        args: [message, params, websocket],\n                        instantiate: true,\n                        async: true\n                      }),\n                      this._options.subscriptionHooks &&\n                        this._options.subscriptionHooks.onOperation &&\n                        this._options.subscriptionHooks.onOperation(message, params, websocket)\n                    ]))\n                  );\n                  resolve({\n                    ...importsResult,\n                    ...moduleOnOperationResult,\n                    ...params\n                  });\n                } catch (e) {\n                  reject(e);\n                }\n              })\n            );\n          }\n          return this.paramsOnOperationResult$Map.get(params);\n        },\n        onOperationComplete: (websocket, opId: any) => {\n          opId = new String(opId);\n          if (!this.opIdOnOperationCompleteResult$Map.has(opId)) {\n            this.opIdOnOperationCompleteResult$Map.set(\n              opId,\n              new Promise(async (resolve, reject) => {\n                try {\n                  const importsOnOperationCompleteHooks$ = subscriptionHooks.map(\n                    async ({ onOperationComplete }) => onOperationComplete && onOperationComplete(websocket, opId)\n                  );\n                  const importsOnOperationCompleteHooks = await Promise.all(importsOnOperationCompleteHooks$);\n                  const importsResult = importsOnOperationCompleteHooks.reduce(\n                    (acc, curr) => ({ ...acc, ...(curr || {}) }),\n                    {}\n                  );\n                  const connectionModuleContext = await this.context(websocket);\n                  const sessionInjector = connectionModuleContext.injector;\n                  const moduleOnOperationCompleteResult = Object.assign(\n                    {},\n                    ...(await Promise.all([\n                      sessionInjector.callHookWithArgs({\n                        hook: 'onOperationComplete',\n                        args: [websocket, opId],\n                        instantiate: true,\n                        async: true\n                      }),\n                      this._options.subscriptionHooks &&\n                        this._options.subscriptionHooks.onOperationComplete &&\n                        this._options.subscriptionHooks.onOperationComplete(websocket, opId)\n                    ]))\n                  );\n                  resolve({\n                    ...importsResult,\n                    ...moduleOnOperationCompleteResult\n                  });\n                } catch (e) {\n                  reject(e);\n                }\n              })\n            );\n          }\n          return this.opIdOnOperationCompleteResult$Map.get(opId);\n        },\n        onDisconnect: (websocket, connectionContext) => {\n          websocket['_moduleOnDisconnect$Map'] = websocket['_moduleOnDisconnect$Map'] || new WeakMap();\n          const moduleOnDisconnect$Map: WeakMap<GraphQLModule, Promise<void>> = websocket['_moduleOnDisconnect$Map'];\n          if (!moduleOnDisconnect$Map.has(this)) {\n            moduleOnDisconnect$Map.set(\n              this,\n              new Promise(async (resolve, reject) => {\n                try {\n                  const importsOnDisconnectHooks$ = subscriptionHooks.map(\n                    async ({ onDisconnect }) => onDisconnect && onDisconnect(websocket, connectionContext)\n                  );\n                  const importsOnDisconnectHooks = await Promise.all(importsOnDisconnectHooks$);\n                  importsOnDisconnectHooks.reduce((acc, curr) => ({ ...acc, ...(curr || {}) }), {});\n                  const connectionModuleContext = await this.context(connectionContext);\n                  const sessionInjector = connectionModuleContext.injector;\n                  await Promise.all([\n                    sessionInjector.callHookWithArgs({\n                      hook: 'onDisconnect',\n                      args: [websocket, connectionContext],\n                      instantiate: true,\n                      async: true\n                    }),\n                    this._options.subscriptionHooks &&\n                      this._options.subscriptionHooks.onDisconnect &&\n                      this._options.subscriptionHooks.onDisconnect(websocket, connectionContext)\n                  ]);\n                  this.destroySelfSession(websocket);\n                  resolve();\n                } catch (e) {\n                  reject(e);\n                }\n              })\n            );\n          }\n          return moduleOnDisconnect$Map.get(this);\n        }\n      };\n    }\n    return this._cache.subscriptionHooks;\n  }\n\n  get selfDefaultProviderScope(): ProviderScope {\n    let defaultProviderScope = ProviderScope.Application;\n    const defaultProviderScopeDefinition = this._options.defaultProviderScope;\n    if (defaultProviderScopeDefinition) {\n      if (typeof defaultProviderScopeDefinition === 'function') {\n        defaultProviderScope = defaultProviderScopeDefinition(this);\n      } else {\n        defaultProviderScope = defaultProviderScopeDefinition;\n      }\n    }\n    return defaultProviderScope;\n  }\n\n  get selfExtraSchemas(): GraphQLSchema[] {\n    let extraSchemas = new Array<GraphQLSchema>();\n    const extraSchemasDefinitions = this._options.extraSchemas;\n    if (extraSchemasDefinitions) {\n      if (typeof extraSchemasDefinitions === 'function') {\n        this.checkConfiguration();\n        extraSchemas = extraSchemasDefinitions(this);\n      } else {\n        extraSchemas = extraSchemasDefinitions;\n      }\n    }\n    return extraSchemas;\n  }\n\n  /**\n   * Returns the GraphQL type definitions of the module\n   * @return a `string` with the merged type definitions\n   */\n  get selfTypeDefs(): DocumentNode {\n    let typeDefs = null;\n    let typeDefsDefinitions = this._options.typeDefs;\n    if (typeDefsDefinitions) {\n      if (typeof typeDefsDefinitions === 'function') {\n        this.checkConfiguration();\n        typeDefsDefinitions = typeDefsDefinitions(this);\n      }\n      if (typeof typeDefsDefinitions === 'string') {\n        typeDefs = parse(typeDefsDefinitions);\n      } else if (Array.isArray(typeDefsDefinitions)) {\n        typeDefsDefinitions = typeDefsDefinitions.filter(typeDefsDefinition => typeDefsDefinition);\n        if (typeDefsDefinitions.length) {\n          typeDefs = mergeTypeDefs(typeDefsDefinitions, {\n            useSchemaDefinition: false\n          });\n        }\n      } else if (typeDefsDefinitions instanceof GraphQLSchema) {\n        typeDefs = parse(printSchemaWithDirectives(typeDefsDefinitions));\n      } else if (typeDefsDefinitions instanceof Promise) {\n        throw new Error(`\n          typeDefs of ${this.name} is not sync. So, you need to wait for it.\n          Please wait for 'typeDefsAsync' promise before starting your GraphQL Server.\n        `);\n      } else if (typeDefsDefinitions) {\n        typeDefs = typeDefsDefinitions;\n      }\n    }\n    return typeDefs;\n  }\n\n  get selfTypeDefsAsync(): Promise<DocumentNode> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let typeDefs = null;\n        let typeDefsDefinitions = await this._options.typeDefs;\n        if (typeDefsDefinitions) {\n          if (typeof typeDefsDefinitions === 'function') {\n            this.checkConfiguration();\n            typeDefsDefinitions = await typeDefsDefinitions(this);\n          }\n          if (typeof typeDefsDefinitions === 'string') {\n            typeDefs = parse(typeDefsDefinitions);\n          } else if (Array.isArray(typeDefsDefinitions)) {\n            typeDefsDefinitions = typeDefsDefinitions.filter(typeDefsDefinition => typeDefsDefinition);\n            if (typeDefsDefinitions.length) {\n              typeDefs = mergeTypeDefs(typeDefsDefinitions, {\n                useSchemaDefinition: false\n              });\n            }\n          } else if (typeDefsDefinitions instanceof GraphQLSchema) {\n            typeDefs = parse(printSchemaWithDirectives(typeDefsDefinitions));\n          } else if (typeDefsDefinitions) {\n            typeDefs = typeDefsDefinitions;\n          }\n        }\n        resolve(typeDefs);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  get selfResolvers(): SelfResolvers {\n    let resolvers = {} as SelfResolvers;\n    let resolversDefinitions = this._options.resolvers;\n    if (resolversDefinitions) {\n      if (typeof resolversDefinitions === 'function') {\n        this.checkConfiguration();\n        resolversDefinitions = this.injector.call(resolversDefinitions, this);\n      }\n      if (resolversDefinitions instanceof Promise) {\n        throw new Error(`\n          Resolvers of ${this.name} is not sync. So, you need to wait for it.\n          Please wait for 'resolversAsync' promise before starting your GraphQL Server.\n        `);\n      }\n      if (Array.isArray(resolversDefinitions)) {\n        resolversDefinitions = mergeResolvers(resolversDefinitions);\n      }\n      resolvers = resolversDefinitions;\n    }\n    return resolvers;\n  }\n\n  get selfResolversAsync(): Promise<SelfResolvers> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let resolvers = {} as SelfResolvers;\n        let resolversDefinitions = await this._options.resolvers;\n        if (resolversDefinitions) {\n          if (typeof resolversDefinitions === 'function') {\n            this.checkConfiguration();\n            resolversDefinitions = await (await this.injectorAsync).call(resolversDefinitions, this);\n          }\n          if (Array.isArray(resolversDefinitions)) {\n            resolversDefinitions = mergeResolvers(resolversDefinitions);\n          }\n          resolvers = resolversDefinitions;\n        }\n        resolve(resolvers);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  get selfImports() {\n    let imports = new Array<GraphQLModule<any, Session, any>>();\n    if (this._options.imports) {\n      if (typeof this._options.imports === 'function') {\n        this.checkConfiguration();\n        imports = this._options.imports(this);\n      } else {\n        imports = this._options.imports;\n      }\n    }\n    if (imports.find(module => typeof module === 'undefined')) {\n      throw new DependencyModuleUndefinedError(this.name);\n    }\n    return imports;\n  }\n\n  get selfProviders(): Provider[] {\n    let providers = new Array<Provider>();\n    const providersDefinitions = this._options.providers;\n    if (providersDefinitions) {\n      if (typeof providersDefinitions === 'function') {\n        this.checkConfiguration();\n        providers = providersDefinitions(this);\n      } else {\n        providers = providersDefinitions;\n      }\n    }\n    return [\n      {\n        provide: ModuleConfig(this),\n        useValue: this.config,\n        overwrite: true\n      },\n      {\n        provide: ModuleConfig,\n        useValue: this.config,\n        overwrite: true\n      },\n      ...providers\n    ];\n  }\n\n  get selfResolversComposition(): ResolversComposerMapping {\n    let resolversComposition = {} as ResolversComposerMapping;\n    const resolversCompositionDefinitions = this._options.resolversComposition;\n    if (resolversCompositionDefinitions) {\n      if (resolversCompositionDefinitions instanceof Function) {\n        this.checkConfiguration();\n        resolversComposition = this.injector.call(resolversCompositionDefinitions, this);\n      } else {\n        resolversComposition = resolversCompositionDefinitions;\n      }\n    }\n    return resolversComposition;\n  }\n\n  get selfSchemaDirectives(): SchemaDirectives {\n    let schemaDirectives: SchemaDirectives = {};\n    const schemaDirectivesDefinitions = this._options.schemaDirectives;\n    if (schemaDirectivesDefinitions) {\n      if (typeof schemaDirectivesDefinitions === 'function') {\n        this.checkConfiguration();\n        schemaDirectives = this.injector.call(schemaDirectivesDefinitions as (...args: any) => SchemaDirectives, this);\n      } else {\n        schemaDirectives = schemaDirectivesDefinitions;\n      }\n    }\n    return schemaDirectives;\n  }\n\n  get selfDirectiveResolvers(): IDirectiveResolvers {\n    let directiveResolvers: IDirectiveResolvers = {};\n    const directiveResolversDefinitions = this._options.directiveResolvers;\n    if (directiveResolversDefinitions) {\n      if (typeof directiveResolversDefinitions === 'function') {\n        this.checkConfiguration();\n        directiveResolvers = this.injector.call(directiveResolversDefinitions, this);\n      } else {\n        directiveResolvers = directiveResolversDefinitions;\n      }\n    }\n    return directiveResolvers;\n  }\n\n  private _isScalarResolver(resolver: any): boolean {\n    return (\n      resolver instanceof GraphQLScalarType ||\n      (typeof resolver === 'object' && resolver['serialize'] && resolver['name'])\n    );\n  }\n\n  private addSessionInjectorToSelfResolversContext(selfResolvers: SelfResolvers) {\n    for (const type in selfResolvers) {\n      const typeResolvers = selfResolvers[type] as any;\n      if (!this._isScalarResolver(typeResolvers)) {\n        for (const prop in selfResolvers[type]) {\n          const resolver = typeResolvers[prop];\n          if (typeof resolver === 'function') {\n            if (prop === '__resolveType' || prop === '__isTypeOf' || prop === '__resolveReference') {\n              typeResolvers[prop] = async (root: any, appContext: any, info: any) => {\n                if (appContext instanceof Promise) {\n                  appContext = await appContext;\n                } else if (typeof appContext === 'undefined') {\n                  appContext = info;\n                }\n                info.session = info.session || appContext.session || appContext;\n                let moduleContext;\n                try {\n                  moduleContext = await this.context(info.session, true);\n                } catch (e) {\n                  const logger = this.selfLogger;\n                  if ('clientError' in logger) {\n                    logger.clientError(e);\n                  }\n                  throw e;\n                }\n                info.schema = this._cache.schema || info.schema;\n                let result;\n                try {\n                  result = await resolver.call(typeResolvers, root, moduleContext, info);\n                } catch (e) {\n                  throw e;\n                }\n                return result;\n              };\n            } else {\n              typeResolvers[prop] = async (root: any, args: any, appContext: any, info: any) => {\n                if (appContext instanceof Promise) {\n                  appContext = await appContext;\n                } else if (typeof appContext === 'undefined') {\n                  appContext = info;\n                }\n                info.session = info.session || appContext.session || appContext;\n                let moduleContext;\n                try {\n                  moduleContext = await this.context(info.session, true);\n                } catch (e) {\n                  const logger = this.selfLogger;\n                  if ('clientError' in logger) {\n                    logger.clientError(e);\n                  }\n                  throw e;\n                }\n                info.schema = this._cache.schema || info.schema;\n                let result;\n                try {\n                  result = await resolver.call(typeResolvers[prop], root, args, moduleContext, info);\n                } catch (e) {\n                  moduleContext.injector.callHookWithArgsAsync({\n                    hook: 'onError',\n                    args: [e],\n                    instantiate: true\n                  });\n                  throw e;\n                }\n                return result;\n              };\n            }\n          } else if (resolver && typeof resolver === 'object' && resolver['subscribe']) {\n            const subscriber = resolver['subscribe'];\n            typeResolvers[prop]['subscribe'] = async (root: any, args: any, appContext: any, info: any) => {\n              if (appContext instanceof Promise) {\n                appContext = await appContext;\n              } else if (typeof appContext === 'undefined') {\n                appContext = info;\n              }\n              info.session = info.session || appContext.session || appContext;\n              let moduleContext;\n              try {\n                moduleContext = await this.context(info.session, true);\n              } catch (e) {\n                const logger = this.selfLogger;\n                if ('clientError' in logger) {\n                  logger.clientError(e);\n                }\n                throw e;\n              }\n              info.schema = this._cache.schema || info.schema;\n              let result;\n              try {\n                result = await subscriber.call(typeResolvers[prop], root, args, moduleContext, info);\n              } catch (e) {\n                moduleContext.injector.callHookWithArgsAsync({\n                  hook: 'onError',\n                  args: [e],\n                  instantiate: true\n                });\n                throw e;\n              }\n              return result;\n            };\n          }\n        }\n      }\n    }\n    return selfResolvers;\n  }\n\n  private addSessionInjectorToSelfResolversCompositionContext(resolversComposition: any) {\n    const visitResolversCompositionElem = (compositionArr: any[]) => {\n      return [\n        (next: any) => async (root: any, args: any, appContext: any, info: any) => {\n          if (appContext instanceof Promise) {\n            appContext = await appContext;\n          } else if (typeof appContext === 'undefined') {\n            appContext = info;\n          }\n          info.session = info.session || appContext.session || appContext;\n          let moduleContext;\n          try {\n            moduleContext = await this.context(info.session, true);\n          } catch (e) {\n            const logger = this.selfLogger;\n            if ('clientError' in logger) {\n              logger.clientError(e);\n            }\n            throw e;\n          }\n          info.schema = this._cache.schema || info.schema;\n          return next(root, args, moduleContext, info);\n        },\n        ...compositionArr\n      ];\n    };\n    for (const path in resolversComposition) {\n      if (resolversComposition[path] instanceof Function || resolversComposition[path] instanceof Array) {\n        const compositionArr = asArray(resolversComposition[path]);\n        resolversComposition[path] = visitResolversCompositionElem(compositionArr);\n      } else {\n        for (const subPath in resolversComposition[path]) {\n          const compositionArr = asArray(resolversComposition[path][subPath]);\n          resolversComposition[path][subPath] = visitResolversCompositionElem(compositionArr);\n        }\n      }\n    }\n    return resolversComposition;\n  }\n\n  static defaultLogger: Logger = console;\n\n  get selfLogger(): Logger {\n    let logger: Logger = GraphQLModule.defaultLogger;\n    if (typeof this._cache.selfLogger === 'undefined') {\n      const loggerDefinition = this._options.logger;\n      if (loggerDefinition) {\n        if (loggerDefinition instanceof Function) {\n          this.checkConfiguration();\n          this._cache.selfLogger = this.injector.call(loggerDefinition as () => Logger, this);\n        } else {\n          this._cache.selfLogger = loggerDefinition as Logger;\n        }\n        logger = this._cache.selfLogger;\n      } else {\n        this._cache.selfLogger = null;\n      }\n    } else if (this._cache.selfLogger !== null) {\n      logger = this._cache.selfLogger;\n    }\n    return logger;\n  }\n\n  static defaultCache: KeyValueCache = new InMemoryLRUCache();\n\n  get selfCache(): KeyValueCache {\n    let cache: KeyValueCache = GraphQLModule.defaultCache;\n    if (typeof this._cache.selfKeyValueCache === 'undefined') {\n      const cacheDefinition = this._options.cache;\n      if (cacheDefinition) {\n        if (cacheDefinition instanceof Function) {\n          this.checkConfiguration();\n          this._cache.selfKeyValueCache = this.injector.call(cacheDefinition as () => KeyValueCache, this);\n        } else {\n          this._cache.selfKeyValueCache = cacheDefinition as KeyValueCache;\n        }\n        cache = this._cache.selfKeyValueCache;\n      } else {\n        this._cache.selfKeyValueCache = null;\n      }\n    } else if (this._cache.selfKeyValueCache !== null) {\n      cache = this._cache.selfKeyValueCache;\n    }\n    return cache;\n  }\n\n  get selfResolverValidationOptions(): IResolverValidationOptions {\n    let resolverValidationOptions: IResolverValidationOptions = {};\n    const resolverValidationOptionsDefinitions = this._options.resolverValidationOptions;\n    if (resolverValidationOptionsDefinitions) {\n      if (resolverValidationOptionsDefinitions instanceof Function) {\n        this.checkConfiguration();\n        resolverValidationOptions = this.injector.call(\n          resolverValidationOptionsDefinitions as () => IResolverValidationOptions,\n          this\n        );\n      } else {\n        resolverValidationOptions = resolverValidationOptionsDefinitions as IResolverValidationOptions;\n      }\n    }\n    return resolverValidationOptions;\n  }\n\n  private _sessionContext$Map = new WeakMap<Session, Promise<ModuleContext<Context>>>();\n\n  /**\n   * Build a GraphQL `context` object based on a network session.\n   * It iterates over all modules by their dependency-based order, and executes\n   * `contextBuilder` method.\n   * It also in charge of injecting a reference to the application `Injector` to\n   * the `context`.\n   * The network session is passed to each `contextBuilder` method, and the return\n   * value of each `contextBuilder` is merged into a unified `context` object.\n   *\n   * This method should be in use with your GraphQL manager, such as Apollo-Server.\n   *\n   * @param session - the network session from `connect`, `express`, etc...\n   */\n  get context(): (\n    session: Session,\n    excludeSession?: boolean,\n    excludeInjector?: boolean\n  ) => Promise<ModuleContext<Context>> {\n    if (!this._cache.contextBuilder) {\n      const selfImports = this.selfImports;\n      this._cache.contextBuilder = (session, excludeSession = false, excludeInjector = false) => {\n        session = normalizeSession(session);\n        if (!this._sessionContext$Map.has(session)) {\n          this._sessionContext$Map.set(\n            session,\n            new Promise(async (resolve, reject) => {\n              try {\n                const importsContext: ModuleContext<{}> = {\n                  injector: undefined\n                };\n                if (selfImports.length) {\n                  const importsContexts = await Promise.all(\n                    selfImports.map(module => module.context(session, true, true))\n                  );\n                  Object.assign(importsContext, ...importsContexts);\n                }\n                const moduleSessionInfo = new ModuleSessionInfo(this, session);\n                const sessionInjector = await moduleSessionInfo.injectorAsync;\n                let moduleContext;\n                const moduleContextDeclaration = this._options.context;\n                if (moduleContextDeclaration) {\n                  if (moduleContextDeclaration instanceof Function) {\n                    importsContext.injector = sessionInjector;\n                    moduleContext = await moduleContextDeclaration(session, importsContext, moduleSessionInfo);\n                  } else {\n                    moduleContext = await moduleContextDeclaration;\n                  }\n                }\n                moduleSessionInfo.context = Object.assign<any, Context>(importsContext, moduleContext);\n                const res: ServerResponse = session && session['res'];\n                if (res && 'once' in res) {\n                  if (!('_onceFinishListeners' in res)) {\n                    res['_onceFinishListeners'] = [];\n\n                    function cleanUpOnComplete() {\n                      const onceFinishListeners = res['_onceFinishListeners'];\n\n                      if (onceFinishListeners) {\n                        for (const onceFinishListener of onceFinishListeners) {\n                          onceFinishListener();\n                        }\n                        delete res['_onceFinishListeners'];\n                      }\n                    }\n\n                    res.once('close', cleanUpOnComplete);\n                    res.once('finish', cleanUpOnComplete);\n                  }\n                  res['_onceFinishListeners'].push(() => {\n                    sessionInjector.callHookWithArgs({\n                      hook: 'onResponse',\n                      args: [moduleSessionInfo],\n                      instantiate: true,\n                      async: false\n                    });\n                    this.destroySelfSession(session);\n                  });\n                }\n                sessionInjector.onInstanceCreated = ({ instance }) => {\n                  if (\n                    typeof instance !== 'number' &&\n                    typeof instance !== 'boolean' &&\n                    typeof instance !== 'string' &&\n                    'initialize' in instance &&\n                    typeof instance['initialize'] === 'function'\n                  ) {\n                    instance['initialize']({ cache: this.selfCache, context: moduleSessionInfo.context });\n                  }\n                };\n                await sessionInjector.callHookWithArgs({\n                  hook: 'onRequest',\n                  args: [moduleSessionInfo],\n                  instantiate: true,\n                  async: true\n                });\n                resolve(moduleSessionInfo.context);\n              } catch (e) {\n                reject(e);\n              }\n            })\n          );\n        }\n        if (excludeInjector && excludeSession) {\n          return this._sessionContext$Map.get(session);\n        }\n        return this._sessionContext$Map.get(session).then(moduleContext => {\n          const finalContext = Object.assign({}, moduleContext);\n          if (!excludeInjector) {\n            finalContext.injector = this.injector.getSessionInjector(session);\n          }\n          if (!excludeSession) {\n            finalContext['session'] = session;\n          }\n          return finalContext;\n        });\n      };\n    }\n    return this._cache.contextBuilder;\n  }\n\n  private destroySelfSession(session: Session) {\n    this.injector.destroySessionInjector(session);\n    this._sessionContext$Map.delete(session);\n  }\n}\n"]}