{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { GraphQLScalarType } from 'graphql';\nimport { IResolverObject, IResolverOptions, IEnumResolver } from '@kamilkisiela/graphql-tools';\nimport { Injector } from '@graphql-modules/di';\nimport { ModuleSessionInfo } from './module-session-info';\nimport { GraphQLModule } from './graphql-module';\n\nexport type Resolvers<TSource = any, TContext = any> = Partial<{\n  [key: string]:\n    | (() => any)\n    | Partial<IResolverObject<TSource, TContext>>\n    | IResolverOptions<TSource, TContext>\n    | GraphQLScalarType\n    | IEnumResolver;\n}>;\n\nexport interface OnInit<Config = any, Session extends object = any, Context = any> {\n  onInit(module: GraphQLModule<Config, Session, Context>): void;\n}\n\nexport interface OnRequest<Config = any, Session extends object = any, Context = any> {\n  onRequest(moduleSessionInfo: ModuleSessionInfo<Config, Session, Context>): Promise<void> | void;\n}\n\nexport interface OnResponse<Config = any, Session extends object = any, Context = any> {\n  onResponse(moduleSessionInfo: ModuleSessionInfo<Config, Session, Context>): Promise<void> | void;\n}\n\nexport type OnConnectFn<ConnectionParams = object, WebSocket = any, ConnectionContext = any, Result = any> = (\n  connectionParams: ConnectionParams,\n  websocket: WebSocket,\n  connectionContext: ConnectionContext\n) => Result | Promise<Result>;\nexport interface OnConnect<ConnectionParams = object, WebSocket = any, ConnectionContext = any, Result = any> {\n  onConnect: OnConnectFn<ConnectionParams, WebSocket, ConnectionContext, Result>;\n}\n\nexport type OnOperationFn<SubscriptionMessage = any, SubscriptionOptions = any, WebSocket = any, Result = any> = (\n  message: SubscriptionMessage,\n  params: SubscriptionOptions,\n  WebSocket: WebSocket\n) => Result;\nexport interface OnOperation<SubscriptionMessage = any, SubscriptionOptions = any, WebSocket = any, Result = any> {\n  onOperation: OnOperationFn<SubscriptionMessage, SubscriptionOptions, WebSocket, Result>;\n}\n\nexport type OnOperationCompleteFn<WebSocket = any, OpId = string, OnOperationCompleteResult = any> = (\n  websocket: WebSocket,\n  opId: OpId\n) => OnOperationCompleteResult;\nexport interface OnOperationComplete<WebSocket = any, OpId = string, OnOperationCompleteResult = any> {\n  onOperationComplete: OnOperationCompleteFn<WebSocket, OpId, OnOperationCompleteResult>;\n}\n\nexport type OnDisconnectFn<WebSocket = any, ConnectionContext = any, Result = any> = (\n  websocket: WebSocket,\n  connectionContext: ConnectionContext\n) => Result;\nexport interface OnDisconnect<WebSocket = any, ConnectionContext = any, Result = any> {\n  onDisconnect: OnDisconnectFn<WebSocket, ConnectionContext, Result>;\n}\n\nexport type OnErrorFn = (e: Error) => any;\nexport interface OnError {\n  onError: OnError;\n}\n\nexport interface SubscriptionHooks<\n  ConnectionParams = object,\n  WebSocket = any,\n  ConnectionContext = any,\n  SubscriptionMessage = any,\n  SubscriptionOptions = any,\n  OpId = string,\n  OnConnectResult = any,\n  OnOperationResult = any,\n  OnOperationCompleteResult = any,\n  OnDisconnectResult = any\n> {\n  onConnect: OnConnectFn<ConnectionParams, WebSocket, ConnectionContext, OnConnectResult>;\n  onOperation: OnOperationFn<SubscriptionMessage, SubscriptionOptions, WebSocket, OnOperationResult>;\n  onOperationComplete: OnOperationCompleteFn<WebSocket, OpId, OnOperationCompleteResult>;\n  onDisconnect: OnDisconnectFn<WebSocket, ConnectionContext, OnDisconnectResult>;\n}\n\nexport type ModuleContext<Context = { [key: string]: any }> = Context & { injector: Injector };\n"]}