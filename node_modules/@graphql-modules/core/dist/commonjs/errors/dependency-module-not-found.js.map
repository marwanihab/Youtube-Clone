{"version":3,"file":"dependency-module-not-found.js","sourceRoot":"","sources":["../../../src/errors/dependency-module-not-found.ts"],"names":[],"mappings":";;AAAA,MAAa,6BAA8B,SAAQ,KAAK;IACtD,YAAoB,WAAmB,EAAU,UAAkB;QACjE,KAAK,CAAC;;kBAEQ,WAAW,+BAA+B,UAAU;mBACnD,WAAW;;;;;GAK3B,CAAC,CAAC;QATiB,gBAAW,GAAX,WAAW,CAAQ;QAAU,eAAU,GAAV,UAAU,CAAQ;QAUjE,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,6BAA6B,CAAC,SAAS,CAAC,CAAC;QACrE,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;IAC/D,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF;AAtBD,sEAsBC","sourcesContent":["export class DependencyModuleNotFoundError extends Error {\n  constructor(private _dependency: string, private _dependent: string) {\n    super(`\n      GraphQL-Modules Error: Dependency Module Not Found!\n      - Module #${_dependency} couldn't be imported into #${_dependent}\n      -- Module #${_dependency} is not defined in that scope!\n\n      Possible solutions:\n      - If you're using 'forRoot' on the upper import, use 'forChild' on the children imports.\n      - If you're using 'forChild' on the parent imports, use 'forRoot' on the upper import.\n  `);\n    Object.setPrototypeOf(this, DependencyModuleNotFoundError.prototype);\n    Error.captureStackTrace(this, DependencyModuleNotFoundError);\n  }\n\n  get dependency(): string {\n    return this._dependency;\n  }\n\n  get dependent(): string {\n    return this._dependent;\n  }\n}\n"]}