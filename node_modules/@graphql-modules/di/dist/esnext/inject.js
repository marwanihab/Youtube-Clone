import { DESIGN_PARAMTYPES, DESIGN_TYPE, PROPERTY_KEYS } from './utils';
export function Inject(dependency) {
    return (target, propertyKey, index) => {
        const allDependencies = Reflect.getMetadata(DESIGN_PARAMTYPES, target) || [];
        const propertyKeys = Reflect.getMetadata(PROPERTY_KEYS, target.constructor || target) || [];
        if (typeof propertyKey === 'undefined') {
            if (typeof index !== 'undefined') {
                allDependencies[index] = dependency;
            }
        }
        else {
            const designType = dependency || Reflect.getMetadata(DESIGN_TYPE, target, propertyKey);
            Reflect.defineMetadata(DESIGN_TYPE, designType, target, propertyKey);
            propertyKeys.push(propertyKey);
        }
        Reflect.defineMetadata(DESIGN_PARAMTYPES, allDependencies, target);
        Reflect.defineMetadata(PROPERTY_KEYS, propertyKeys, target.constructor || target);
        return target;
    };
}
export function InjectFunction(...dependencies) {
    return (target) => {
        Reflect.defineMetadata(DESIGN_PARAMTYPES, dependencies, target);
        return target;
    };
}
//# sourceMappingURL=inject.js.map