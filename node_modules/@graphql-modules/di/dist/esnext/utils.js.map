{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAUA,MAAM,CAAC,MAAM,iBAAiB,GAAG,mBAAmB,CAAC;AACrD,MAAM,CAAC,MAAM,WAAW,GAAG,aAAa,CAAC;AACzC,MAAM,CAAC,MAAM,gBAAgB,GAAG,kBAAkB,CAAC;AACnD,MAAM,CAAC,MAAM,aAAa,GAAG,eAAe,CAAC;AAE7C,MAAM,UAAU,wBAAwB,CAAI,iBAAuC;IACjF,IAAI,OAAO,iBAAiB,KAAK,UAAU,IAAI,MAAM,CAAI,iBAAiB,CAAC,EAAE;QAC3E,OAAO,iBAAiB,CAAC,IAAI,CAAC;KAC/B;SAAM,IAAI,OAAO,iBAAiB,KAAK,WAAW,EAAE;QACnD,OAAO,iBAAiB,CAAC,QAAQ,EAAE,CAAC;KACrC;SAAM;QACL,OAAO,WAAW,CAAC;KACpB;AACH,CAAC;AAED,MAAM,UAAU,MAAM,CAAI,CAAM;IAC9B,OAAO,OAAO,CAAC,KAAK,UAAU,IAAI,WAAW,IAAI,CAAC,CAAC;AACrD,CAAC;AAED,MAAM,UAAU,cAAc,CAAI,CAAc;IAC9C,OAAO,MAAM,CAAI,CAAC,CAAC,CAAC;AACtB,CAAC;AAED,MAAM,UAAU,eAAe,CAAI,CAAc;IAC/C,OAAO,UAAU,IAAI,CAAC,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,eAAe,CAAI,CAAc;IAC/C,OAAO,UAAU,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;AAC/C,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAI,CAAc;IACjD,OAAO,YAAY,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,UAAU,KAAK,UAAU,CAAC;AACjE,CAAC","sourcesContent":["import {\n  ServiceIdentifier,\n  Provider,\n  Type,\n  ValueProvider,\n  ClassProvider,\n  FactoryProvider,\n  TypeProvider\n} from './types';\n\nexport const DESIGN_PARAMTYPES = 'design:paramtypes';\nexport const DESIGN_TYPE = 'design:type';\nexport const PROVIDER_OPTIONS = 'provider-options';\nexport const PROPERTY_KEYS = 'property-keys';\n\nexport function getServiceIdentifierName<T>(serviceIdentifier: ServiceIdentifier<T>) {\n  if (typeof serviceIdentifier === 'function' && isType<T>(serviceIdentifier)) {\n    return serviceIdentifier.name;\n  } else if (typeof serviceIdentifier !== 'undefined') {\n    return serviceIdentifier.toString();\n  } else {\n    return 'undefined';\n  }\n}\n\nexport function isType<T>(v: any): v is Type<T> {\n  return typeof v === 'function' && 'prototype' in v;\n}\n\nexport function isTypeProvider<T>(v: Provider<T>): v is TypeProvider<T> {\n  return isType<T>(v);\n}\n\nexport function isValueProvider<T>(v: Provider<T>): v is ValueProvider<T> {\n  return 'useValue' in v;\n}\n\nexport function isClassProvider<T>(v: Provider<T>): v is ClassProvider<T> {\n  return 'useClass' in v && isType(v.useClass);\n}\n\nexport function isFactoryProvider<T>(v: Provider<T>): v is FactoryProvider<T> {\n  return 'useFactory' in v && typeof v.useFactory === 'function';\n}\n"]}