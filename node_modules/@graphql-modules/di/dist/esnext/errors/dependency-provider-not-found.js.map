{"version":3,"file":"dependency-provider-not-found.js","sourceRoot":"","sources":["../../../src/errors/dependency-provider-not-found.ts"],"names":[],"mappings":"AAAA,OAAO,EAAqB,wBAAwB,EAAE,MAAM,IAAI,CAAC;AAEjE,MAAM,WAAW,GAAG,CAClB,WAA0C,EAC1C,UAAwC,EACxC,WAAmB,EACnB,gBAAwB,EACxB,EAAE;IACF,MAAM,cAAc,GAAG,wBAAwB,CAAC,WAAW,CAAC,CAAC;IAC7D,MAAM,aAAa,GAAG,wBAAwB,CAAC,UAAU,CAAC,CAAC;IAC3D,OAAO,cAAc,KAAK,QAAQ;QAChC,CAAC,CAAC;;0BAEoB,gBAAgB,wCAAwC,aAAa;;;0DAGrC,aAAa;;GAEpE;QACC,CAAC,CAAC;;kBAEY,cAAc,kBAAkB,gBAAgB,wCAAwC,wBAAwB,CAC1H,UAAU,CACX;mBACY,cAAc,+BAA+B,WAAW;;;4DAGf,wBAAwB,CAC9E,WAAW,CACZ,+BAA+B,wBAAwB,CAAC,UAAU,CAAC;2DACb,gBAAgB;KACtE,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,OAAO,+BAAuD,SAAQ,KAAK;IAC/E,YACU,WAA0C,EAC1C,UAAwC,EACxC,WAAmB,EACnB,gBAAwB;QAEhC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC,CAAC;QALnE,gBAAW,GAAX,WAAW,CAA+B;QAC1C,eAAU,GAAV,UAAU,CAA8B;QACxC,gBAAW,GAAX,WAAW,CAAQ;QACnB,qBAAgB,GAAhB,gBAAgB,CAAQ;QAGhC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,+BAA+B,CAAC,SAAS,CAAC,CAAC;QACvE,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,+BAA+B,CAAC,CAAC;IACjE,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;CACF","sourcesContent":["import { ServiceIdentifier, getServiceIdentifierName } from '..';\n\nconst getErrorMsg = <Dependency, Dependent>(\n  _dependency: ServiceIdentifier<Dependency>,\n  _dependent: ServiceIdentifier<Dependent>,\n  _moduleName: string,\n  _dependencyIndex: number\n) => {\n  const dependencyName = getServiceIdentifierName(_dependency);\n  const dependentName = getServiceIdentifierName(_dependent);\n  return dependencyName === 'Object'\n    ? `\n  GraphQL-Modules Error: Dependency Provider Not Valid!\n  - Provider in index: #${_dependencyIndex} couldn't be injected into Provider #${dependentName}\n\n  Possible solutions:\n  - There might be a circular import issue in Provider #${dependentName}. So make sure imports are valid.\n  - Try using Inject decorator!\n  `\n    : `\n    GraphQL-Modules Error: Dependency Provider Not Found!\n    - Provider #${dependencyName} at the index #${_dependencyIndex} couldn't be injected into Provider #${getServiceIdentifierName(\n        _dependent\n      )}\n    -- Provider #${dependencyName} is not provided in #Module ${_moduleName} scope!\n\n    Possible solutions:\n    - Make sure you have imported the module of Provider #${getServiceIdentifierName(\n      _dependency\n    )} in the module of Provider #${getServiceIdentifierName(_dependent)}\n    - Check the dependency of the provider at the index #${_dependencyIndex}\n    `;\n};\n\nexport class DependencyProviderNotFoundError<Dependency, Dependent> extends Error {\n  constructor(\n    private _dependency: ServiceIdentifier<Dependency>,\n    private _dependent: ServiceIdentifier<Dependent>,\n    private _moduleName: string,\n    private _dependencyIndex: number\n  ) {\n    super(getErrorMsg(_dependency, _dependent, _moduleName, _dependencyIndex));\n    Object.setPrototypeOf(this, DependencyProviderNotFoundError.prototype);\n    Error.captureStackTrace(this, DependencyProviderNotFoundError);\n  }\n\n  get dependency(): ServiceIdentifier<Dependency> {\n    return this._dependency;\n  }\n\n  get dependent(): ServiceIdentifier<Dependent> {\n    return this._dependent;\n  }\n\n  get moduleName(): string {\n    return this._moduleName;\n  }\n\n  get dependencyIndex(): number {\n    return this._dependencyIndex;\n  }\n}\n"]}