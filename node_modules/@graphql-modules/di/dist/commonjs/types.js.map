{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";;AAoCA,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,4CAA2B,CAAA;IAC3B,oCAAmB,CAAA;IACnB,oCAAmB,CAAA;AACrB,CAAC,EAJW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAIxB","sourcesContent":["import { Injector } from './injector';\n\nexport interface Abstract<T> {\n  prototype: T;\n}\nexport type ServiceIdentifier<T> = string | symbol | Type<T> | Abstract<T>;\n\nexport type Type<T> = new (...args: any[]) => T;\n\nexport interface ValueProvider<T> extends BaseProvider<T> {\n  useValue: T;\n}\n\nexport interface ClassProvider<T> extends BaseProvider<T> {\n  useClass: Type<T>;\n}\n\nexport type Factory<T> = (injector: Injector) => T;\n\nexport interface FactoryProvider<T> extends BaseProvider<T> {\n  useFactory: Factory<T>;\n}\n\nexport interface BaseProvider<T> extends ProviderOptions {\n  provide: ServiceIdentifier<T>;\n}\n\nexport interface TypeProvider<T> extends Type<T> {}\n\nexport type Provider<T = any> = TypeProvider<T> | ValueProvider<T> | ClassProvider<T> | FactoryProvider<T>;\n\nexport interface ProviderOptions {\n  overwrite?: boolean;\n  scope?: ProviderScope;\n}\n\nexport enum ProviderScope {\n  Application = 'APPLICATION',\n  Request = 'REQUEST',\n  Session = 'SESSION'\n}\n\nexport type Instances<Dependencies extends Array<ServiceIdentifier<any>>> = {\n  [Key in keyof Dependencies]: Dependencies[Key] extends Type<any> ? InstanceType<Dependencies[Key]> : any\n};\nexport type ExtendedSession<Session> = Session & { nameSessionInjectorMap: Map<string, Injector> };\n"]}