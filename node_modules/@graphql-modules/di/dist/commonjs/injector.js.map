{"version":3,"file":"injector.js","sourceRoot":"","sources":["../../src/injector.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ProviderNotValidError,\n  ServiceIdentifierNotFoundError,\n  DependencyProviderNotFoundError,\n  ProviderAlreadyDefinedError\n} from './errors';\nimport { ServiceIdentifier, Type, Provider, ProviderScope, ProviderOptions, Factory } from './types';\nimport {\n  isTypeProvider,\n  PROVIDER_OPTIONS,\n  isValueProvider,\n  isClassProvider,\n  isFactoryProvider,\n  DESIGN_PARAMTYPES,\n  DESIGN_TYPE,\n  PROPERTY_KEYS\n} from './utils';\n\nexport interface InjectorOptions {\n  name?: string;\n  injectorScope?: ProviderScope;\n  defaultProviderScope?: ProviderScope;\n  hooks?: string[];\n  initialProviders?: Provider[];\n  children?: Injector[];\n}\n\nexport class Injector<Session extends object = any> {\n  private _classMap = new Map<ServiceIdentifier<any>, Type<any>>();\n  private _factoryMap = new Map<ServiceIdentifier<any>, Factory<any>>();\n  private _applicationScopeInstanceMap = new Map<ServiceIdentifier<any>, any>();\n  private _sessionScopeInstanceMap = new Map<ServiceIdentifier<any>, any>();\n  private _applicationScopeServiceIdentifiers = new Array<ServiceIdentifier<any>>();\n  private _requestScopeServiceIdentifiers = new Array<ServiceIdentifier<any>>();\n  private _sessionScopeServiceIdentifiers = new Array<ServiceIdentifier<any>>();\n  private _hookServiceIdentifiersMap = new Map<string, Array<ServiceIdentifier<any>>>();\n  private _name = this.options.name || Date.now().toString();\n  private _injectorScope = this.options.injectorScope || ProviderScope.Application;\n  private _defaultProviderScope = this.options.defaultProviderScope || this._injectorScope;\n  private _hooks = this.options.hooks || new Array<string>();\n  private _initialProviders = this.options.initialProviders || new Array<Provider>();\n  private _children = this.options.children || new Array<Injector>();\n  public onInstanceCreated: <T>(arg?: { serviceIdentifier: ServiceIdentifier<T>; instance: T }) => any = () => {};\n  constructor(private options: InjectorOptions = {}) {\n    for (const provider of this._initialProviders) {\n      if (provider) {\n        this.provide(provider);\n      }\n    }\n  }\n  public addChild(...children: Injector[]) {\n    for (const child of children) {\n      this._children.push(child);\n    }\n  }\n  public removeChild(...children: Injector[]) {\n    for (const child of children) {\n      this._children.splice(this._children.indexOf(child), 1);\n    }\n  }\n  public hasChild(child: Injector) {\n    return this._children.includes(child);\n  }\n  private getScopeInstanceMap(providerScope = this._injectorScope) {\n    switch (providerScope) {\n      case ProviderScope.Application:\n        return this._applicationScopeInstanceMap;\n      case ProviderScope.Session:\n        return this._sessionScopeInstanceMap;\n      case ProviderScope.Request:\n        return new Map<ServiceIdentifier<any>, any>();\n    }\n  }\n  public provide<T>(provider: Provider<T>): void {\n    if (isTypeProvider(provider)) {\n      const options: ProviderOptions = Reflect.getMetadata(PROVIDER_OPTIONS, provider);\n      if (this.has(provider)) {\n        throw new ProviderAlreadyDefinedError(this._name, provider);\n      }\n      this._classMap.set(provider, provider);\n      switch ((options && options.scope) || this._defaultProviderScope) {\n        case ProviderScope.Application:\n          this._applicationScopeServiceIdentifiers.push(provider);\n          break;\n        case ProviderScope.Request:\n          this._requestScopeServiceIdentifiers.push(provider);\n          break;\n        case ProviderScope.Session:\n          this._sessionScopeServiceIdentifiers.push(provider);\n          break;\n      }\n      for (const hook of this._hooks) {\n        if (hook in provider.prototype) {\n          if (!this._hookServiceIdentifiersMap.has(hook)) {\n            this._hookServiceIdentifiersMap.set(hook, []);\n          }\n          this._hookServiceIdentifiersMap.get(hook).push(provider);\n        }\n      }\n      return;\n    }\n\n    if (this.has(provider.provide)) {\n      if (!provider.overwrite) {\n        throw new ProviderAlreadyDefinedError(this._name, provider.provide);\n      } else {\n        this._classMap.delete(provider.provide);\n        this._factoryMap.delete(provider.provide);\n        this.getScopeInstanceMap().delete(provider.provide);\n        this._applicationScopeServiceIdentifiers.splice(\n          this._applicationScopeServiceIdentifiers.indexOf(provider.provide),\n          1\n        );\n        this._sessionScopeServiceIdentifiers.splice(\n          this._applicationScopeServiceIdentifiers.indexOf(provider.provide),\n          1\n        );\n        this._requestScopeServiceIdentifiers.splice(\n          this._applicationScopeServiceIdentifiers.indexOf(provider.provide),\n          1\n        );\n      }\n    }\n\n    if (isValueProvider(provider)) {\n      this.getScopeInstanceMap().set(provider.provide, provider.useValue);\n    } else if (isClassProvider(provider)) {\n      const providedClassOptions: ProviderOptions = provider.provide['prototype']\n        ? Reflect.getMetadata(PROVIDER_OPTIONS, provider.provide)\n        : null;\n      const useClassOptions: ProviderOptions = Reflect.getMetadata(PROVIDER_OPTIONS, provider.useClass);\n      provider.scope =\n        provider.scope ||\n        (providedClassOptions && providedClassOptions.scope) ||\n        (useClassOptions && useClassOptions.scope);\n      this._classMap.set(provider.provide, provider.useClass);\n      for (const hook of this._hooks) {\n        if (hook in provider.useClass.prototype) {\n          if (!this._hookServiceIdentifiersMap.has(hook)) {\n            this._hookServiceIdentifiersMap.set(hook, []);\n          }\n          this._hookServiceIdentifiersMap.get(hook).push(provider.useClass);\n        }\n      }\n    } else if (isFactoryProvider(provider)) {\n      this._factoryMap.set(provider.provide, provider.useFactory);\n    } else {\n      throw new ProviderNotValidError(this._name, provider['provide'] && provider);\n    }\n\n    switch (provider.scope || this._defaultProviderScope) {\n      case ProviderScope.Application:\n        this._applicationScopeServiceIdentifiers.push(provider.provide);\n        break;\n      case ProviderScope.Request:\n        this._requestScopeServiceIdentifiers.push(provider.provide);\n        break;\n      case ProviderScope.Session:\n        this._sessionScopeServiceIdentifiers.push(provider.provide);\n        break;\n    }\n  }\n\n  public has<T>(serviceIdentifier: ServiceIdentifier<T>): boolean {\n    return (\n      this.getScopeInstanceMap(ProviderScope.Application).has(serviceIdentifier) ||\n      this.getScopeInstanceMap(ProviderScope.Session).has(serviceIdentifier) ||\n      this._classMap.has(serviceIdentifier) ||\n      this._factoryMap.has(serviceIdentifier)\n    );\n  }\n\n  public remove<T>(serviceIdentifier: ServiceIdentifier<T>): void {\n    this.getScopeInstanceMap().delete(serviceIdentifier);\n    this._classMap.delete(serviceIdentifier);\n    this._factoryMap.delete(serviceIdentifier);\n  }\n\n  public get scopeServiceIdentifiers() {\n    switch (this._injectorScope) {\n      case ProviderScope.Application:\n        return this._applicationScopeServiceIdentifiers;\n      case ProviderScope.Request:\n        return this._requestScopeServiceIdentifiers;\n      case ProviderScope.Session:\n        return this._sessionScopeServiceIdentifiers;\n    }\n  }\n  public get<T>(serviceIdentifier: ServiceIdentifier<T>, dependencyIndex?: number): T {\n    const applicationScopeInstanceMap = this.getScopeInstanceMap(ProviderScope.Application);\n    const sessionScopeInstanceMap = this.getScopeInstanceMap(ProviderScope.Session);\n    if (sessionScopeInstanceMap.has(serviceIdentifier)) {\n      return sessionScopeInstanceMap.get(serviceIdentifier);\n    } else if (applicationScopeInstanceMap.has(serviceIdentifier)) {\n      return applicationScopeInstanceMap.get(serviceIdentifier);\n    } else if (this._classMap.has(serviceIdentifier)) {\n      const RealClazz = this._classMap.get(serviceIdentifier);\n      try {\n        const dependencies: Array<ServiceIdentifier<any>> = Reflect.getMetadata(DESIGN_PARAMTYPES, RealClazz) || [];\n        const dependencyInstances = dependencies.map((dependency, dependencyIndex) =>\n          this.get(dependency, dependencyIndex)\n        );\n        const instance = new RealClazz(...dependencyInstances);\n        const propertyKeys = Reflect.getMetadata(PROPERTY_KEYS, RealClazz) || [];\n        for (const propertyKey of propertyKeys) {\n          const dependency = Reflect.getMetadata(DESIGN_TYPE, RealClazz.prototype, propertyKey);\n          if (dependency) {\n            Object.defineProperty(instance, propertyKey, {\n              value: this.get(dependency, propertyKeys.indexOf(propertyKey))\n            });\n          }\n        }\n        if (this._applicationScopeServiceIdentifiers.includes(serviceIdentifier)) {\n          this._applicationScopeInstanceMap.set(serviceIdentifier, instance);\n        }\n        if (this._sessionScopeServiceIdentifiers.includes(serviceIdentifier)) {\n          this._sessionScopeInstanceMap.set(serviceIdentifier, instance);\n        }\n        this.onInstanceCreated({ serviceIdentifier, instance });\n        return instance;\n      } catch (e) {\n        if (e instanceof ServiceIdentifierNotFoundError) {\n          throw new DependencyProviderNotFoundError(e.serviceIdentifier, RealClazz, this._name, e.dependencyIndex);\n        } else {\n          throw e;\n        }\n      }\n    } else if (this._factoryMap.has(serviceIdentifier)) {\n      const factory = this._factoryMap.get(serviceIdentifier);\n      const instance = this.call(factory, this);\n      if (this._applicationScopeServiceIdentifiers.includes(serviceIdentifier)) {\n        this._applicationScopeInstanceMap.set(serviceIdentifier, instance);\n      }\n      if (this._sessionScopeServiceIdentifiers.includes(serviceIdentifier)) {\n        this._sessionScopeInstanceMap.set(serviceIdentifier, instance);\n      }\n      this.onInstanceCreated({ serviceIdentifier, instance });\n      return instance;\n    } else {\n      for (const child of this._children) {\n        try {\n          const instance = child.get(serviceIdentifier);\n          return instance;\n        } catch (e) {\n          if (e instanceof ServiceIdentifierNotFoundError && e.serviceIdentifier === serviceIdentifier) {\n            continue;\n          } else {\n            throw e;\n          }\n        }\n      }\n      throw new ServiceIdentifierNotFoundError(serviceIdentifier, this._name, dependencyIndex);\n    }\n  }\n  private _sessionSessionInjectorMap = new WeakMap<Session, Injector>();\n  public hasSessionInjector(session: Session) {\n    return this._sessionSessionInjectorMap.has(session);\n  }\n  public getSessionInjector(session: Session): Injector<Session> {\n    if (!this._sessionSessionInjectorMap.has(session)) {\n      const sessionInjector = new Injector<Session>({\n        name: this._name + '_SESSION',\n        injectorScope: ProviderScope.Session,\n        hooks: this._hooks,\n        children: this._children.map(child => child.getSessionInjector(session))\n      });\n      sessionInjector._hookServiceIdentifiersMap = this._hookServiceIdentifiersMap;\n      sessionInjector._applicationScopeInstanceMap = this._applicationScopeInstanceMap;\n      sessionInjector._classMap = this._classMap;\n      sessionInjector._factoryMap = this._factoryMap;\n      sessionInjector._applicationScopeServiceIdentifiers = this._applicationScopeServiceIdentifiers;\n      sessionInjector._requestScopeServiceIdentifiers = this._requestScopeServiceIdentifiers;\n      sessionInjector._sessionScopeServiceIdentifiers = [...this._sessionScopeServiceIdentifiers];\n      this._sessionSessionInjectorMap.set(session, sessionInjector);\n    }\n    return this._sessionSessionInjectorMap.get(session);\n  }\n  public destroySessionInjector(session: Session) {\n    return this._sessionSessionInjectorMap.delete(session);\n  }\n  public call<Fn extends (this: ThisArg, ...args: any[]) => any, ThisArg>(fn: Fn, thisArg: ThisArg): ReturnType<Fn> {\n    if ('hasMetadata' in Reflect && Reflect.hasMetadata(DESIGN_PARAMTYPES, fn)) {\n      const dependencies: ServiceIdentifier<any>[] = Reflect.getMetadata(DESIGN_PARAMTYPES, fn);\n      const instances: any[] = dependencies.map((dependency, dependencyIndex) => this.get(dependency, dependencyIndex));\n      return fn.call(thisArg, ...instances);\n    }\n    return fn.call(thisArg, thisArg);\n  }\n  async hasHook(hook: string) {\n    return this._hookServiceIdentifiersMap.has(hook);\n  }\n  callHookWithArgs<Args extends any[]>({\n    async,\n    ...options\n  }: {\n    hook: string;\n    args: Args;\n    instantiate: boolean;\n    async: boolean;\n  }) {\n    if (async) {\n      return this.callHookWithArgsAsync(options);\n    } else {\n      return this.callHookWithArgsSync(options);\n    }\n  }\n  callHookWithArgsSync<Args extends any[]>({\n    hook,\n    args,\n    instantiate\n  }: {\n    hook: string;\n    args: Args;\n    instantiate: boolean;\n  }) {\n    const finalResult = {};\n    const serviceIdentifiers = this._hookServiceIdentifiersMap.get(hook);\n    if (serviceIdentifiers) {\n      Object.assign(\n        finalResult,\n        ...serviceIdentifiers.map(serviceIdentifier => {\n          if (!instantiate && !this.getScopeInstanceMap().has(serviceIdentifier)) {\n            return {};\n          }\n          const instance = this.get(serviceIdentifier);\n          if (instance) {\n            const result = instance[hook](...args);\n            if (result) {\n              return result;\n            }\n          }\n          return {};\n        })\n      );\n    }\n    return finalResult;\n  }\n  async callHookWithArgsAsync<Args extends any[]>({\n    hook,\n    args,\n    instantiate\n  }: {\n    hook: string;\n    args: Args;\n    instantiate: boolean;\n  }) {\n    const finalResult = {};\n    const serviceIdentifiers = this._hookServiceIdentifiersMap.get(hook);\n    if (serviceIdentifiers) {\n      Object.assign(\n        finalResult,\n        ...(await Promise.all(\n          serviceIdentifiers.map(async serviceIdentifier => {\n            if (!instantiate && !this.getScopeInstanceMap().has(serviceIdentifier)) {\n              return {};\n            }\n            const instance = this.get(serviceIdentifier);\n            if (instance) {\n              const result = await instance[hook](...args);\n              if (result) {\n                return result;\n              }\n            }\n            return {};\n          })\n        ))\n      );\n    }\n    return finalResult;\n  }\n}\n"]}