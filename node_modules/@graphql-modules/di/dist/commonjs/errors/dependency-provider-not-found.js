"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const getErrorMsg = (_dependency, _dependent, _moduleName, _dependencyIndex) => {
    const dependencyName = __1.getServiceIdentifierName(_dependency);
    const dependentName = __1.getServiceIdentifierName(_dependent);
    return dependencyName === 'Object'
        ? `
  GraphQL-Modules Error: Dependency Provider Not Valid!
  - Provider in index: #${_dependencyIndex} couldn't be injected into Provider #${dependentName}

  Possible solutions:
  - There might be a circular import issue in Provider #${dependentName}. So make sure imports are valid.
  - Try using Inject decorator!
  `
        : `
    GraphQL-Modules Error: Dependency Provider Not Found!
    - Provider #${dependencyName} at the index #${_dependencyIndex} couldn't be injected into Provider #${__1.getServiceIdentifierName(_dependent)}
    -- Provider #${dependencyName} is not provided in #Module ${_moduleName} scope!

    Possible solutions:
    - Make sure you have imported the module of Provider #${__1.getServiceIdentifierName(_dependency)} in the module of Provider #${__1.getServiceIdentifierName(_dependent)}
    - Check the dependency of the provider at the index #${_dependencyIndex}
    `;
};
class DependencyProviderNotFoundError extends Error {
    constructor(_dependency, _dependent, _moduleName, _dependencyIndex) {
        super(getErrorMsg(_dependency, _dependent, _moduleName, _dependencyIndex));
        this._dependency = _dependency;
        this._dependent = _dependent;
        this._moduleName = _moduleName;
        this._dependencyIndex = _dependencyIndex;
        Object.setPrototypeOf(this, DependencyProviderNotFoundError.prototype);
        Error.captureStackTrace(this, DependencyProviderNotFoundError);
    }
    get dependency() {
        return this._dependency;
    }
    get dependent() {
        return this._dependent;
    }
    get moduleName() {
        return this._moduleName;
    }
    get dependencyIndex() {
        return this._dependencyIndex;
    }
}
exports.DependencyProviderNotFoundError = DependencyProviderNotFoundError;
//# sourceMappingURL=dependency-provider-not-found.js.map